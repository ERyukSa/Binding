Index: app/src/main/java/com/example/binding/src/main/home/HomeService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.login.LoginActivityView\r\nimport com.example.binding.src.login.LoginRetrofitInterface\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport com.example.binding.src.main.home.models.GetNewestResponse\r\nimport com.example.binding.src.main.home.models.GetPopularResponse\r\nimport com.example.binding.src.main.menu.MenuFragmentView\r\nimport com.example.binding.src.main.menu.MenuRetrofitInterface\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\nimport com.example.binding.src.main.menu.store_detail.StoreDetailFragmentView\r\nimport com.example.binding.src.main.menu.store_detail.StoreDetailRetrofitInterface\r\nimport com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass HomeService(val view: HomeFragmentView) {\r\n\r\n    // 서점 상세조회 API 실행 (네트워크 통신)\r\n    fun tryGetNewest(){\r\n\r\n        val homeRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            HomeRetrofitInterface::class.java)\r\n\r\n        homeRetrofitInterface.getNewest(1, 20)\r\n            .enqueue(object : Callback<GetNewestResponse> {\r\n\r\n                override fun onResponse(call: Call<GetNewestResponse>,\r\n                                        response: Response<GetNewestResponse>\r\n                ) {\r\n                    view.onGetNewestSuccess(response.body() as GetNewestResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<GetNewestResponse>, t: Throwable) {\r\n                    view.onGetNewestFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n\r\n    // 북마크 수정 API 실행 (네트워크 통신)\r\n    fun tryGetPopular(){\r\n\r\n        val homeRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            HomeRetrofitInterface::class.java)\r\n\r\n        homeRetrofitInterface.getPopular(1, 20)\r\n            .enqueue(object : Callback<GetPopularResponse> {\r\n\r\n                override fun onResponse(call: Call<GetPopularResponse>,\r\n                                        response: Response<GetPopularResponse>\r\n                ) {\r\n                    view.onGetPopularSuccess(response.body() as GetPopularResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<GetPopularResponse>, t: Throwable) {\r\n                    view.onGetPopularFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/HomeService.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/HomeService.kt	(date 1616059361118)
@@ -1,26 +1,16 @@
-package com.example.binding.src.main.home
+package com.makeus6.binding.src.main.home
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.login.LoginActivityView
-import com.example.binding.src.login.LoginRetrofitInterface
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
-import com.example.binding.src.main.home.models.GetNewestResponse
-import com.example.binding.src.main.home.models.GetPopularResponse
-import com.example.binding.src.main.menu.MenuFragmentView
-import com.example.binding.src.main.menu.MenuRetrofitInterface
-import com.example.binding.src.main.menu.models.GetStoresResponse
-import com.example.binding.src.main.menu.store_detail.StoreDetailFragmentView
-import com.example.binding.src.main.menu.store_detail.StoreDetailRetrofitInterface
-import com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.src.main.home.models.GetNewestResponse
+import com.makeus6.binding.src.main.home.models.GetPopularResponse
+import com.makeus6.binding.src.main.home.models.GetSearchResponse
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
 
 class HomeService(val view: HomeFragmentView) {
 
-    // 서점 상세조회 API 실행 (네트워크 통신)
+    // 최신순 책방 불러오기 API 실행 (네트워크 통신)
     fun tryGetNewest(){
 
         val homeRetrofitInterface = ApplicationClass.sRetrofit.create(
@@ -41,7 +31,7 @@
             })
     }
 
-    // 북마크 수정 API 실행 (네트워크 통신)
+    // 인기순 책방 불러오기 API 실행
     fun tryGetPopular(){
 
         val homeRetrofitInterface = ApplicationClass.sRetrofit.create(
@@ -61,4 +51,25 @@
                 }
             })
     }
+
+    // 책방 검색 API 실행 (네트워크 통신)
+    fun tryGetSearchBooks(bookName: String){
+
+        val homeRetrofitInterface = ApplicationClass.sRetrofit.create(
+            HomeRetrofitInterface::class.java)
+
+        homeRetrofitInterface.getSearchBooks(bookName)
+            .enqueue(object : Callback<GetSearchResponse> {
+
+                override fun onResponse(call: Call<GetSearchResponse>,
+                                        response: Response<GetSearchResponse>
+                ) {
+                    view.onGetSearchSuccess(response.body() as GetSearchResponse)
+                }
+
+                override fun onFailure(call: Call<GetSearchResponse>, t: Throwable) {
+                    view.onGetSearchFailure(t.message ?: "통신 오류")
+                }
+            })
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/binding/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.fragment_join_1)\r\n    }\r\n\r\n}
===================================================================
--- app/src/main/java/com/example/binding/MainActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/MainActivity.kt	(date 1616059348575)
@@ -1,4 +1,4 @@
-package com.example.binding
+package com.makeus6.binding
 
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
Index: app/src/main/java/com/example/binding/src/join/JoinActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseActivity\r\nimport com.example.binding.databinding.ActivityJoinBinding\r\nimport com.example.binding.src.join.join1.Join1Fragment\r\nimport com.example.binding.src.join.join2.Join2Fragment\r\nimport com.example.binding.src.join.join3.Join3Fragment\r\nimport com.example.binding.src.login.LoginActivity\r\n\r\n\r\nclass JoinActivity: BaseActivity<ActivityJoinBinding>(ActivityJoinBinding::inflate){\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // join_frm 프레임레이아웃에 Join1 프래그먼트를 올린다\r\n        supportFragmentManager.beginTransaction().add(R.id.join_frm, Join1Fragment())\r\n            .commitAllowingStateLoss()\r\n    }\r\n\r\n    // 회원가입 2번째 화면, 비밀번호 입력창으로 이동\r\n    fun moveToJoin2(email: String) {\r\n\r\n        // 입력받은 이메일 주소를 Join2Fragment로 전달\r\n        val bundle = Bundle()\r\n        bundle.putString(\"email\", email)\r\n\r\n        val join2Fragment = Join2Fragment()\r\n        join2Fragment.arguments = bundle\r\n\r\n        supportFragmentManager.beginTransaction().replace(R.id.join_frm, join2Fragment)\r\n            .commitAllowingStateLoss()\r\n    }\r\n\r\n    // 회원가입 마지막 화면, 닉네임 입력창으로 이동\r\n    fun moveToJoin3(email:String, pwd: String, pwdCheck: String) {\r\n\r\n        // join1,2에서 입력받은 이메일, 비밀번호, 비밀번호 확인을 join3Fragment로 전달\r\n        val bundle = Bundle()\r\n        bundle.putString(\"email\", email)\r\n        bundle.putString(\"pwd\", pwd)\r\n        bundle.putString(\"pwdChk\", pwdCheck)\r\n\r\n        val join3Fragment = Join3Fragment()\r\n        join3Fragment.arguments = bundle\r\n\r\n        supportFragmentManager.beginTransaction().replace(R.id.join_frm, join3Fragment)\r\n            .commitAllowingStateLoss()\r\n    }\r\n\r\n    // 로그인 화면으로 이동\r\n    fun moveToLogin(isJoined: Boolean){\r\n        val loginIntent = Intent(this, LoginActivity::class.java)\r\n        // 회원가입 성공 후 로그인 화면으로 돌아오는건지 확인\r\n        loginIntent.putExtra(\"isJoined\", isJoined)\r\n        startActivity(loginIntent)\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/JoinActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/JoinActivity.kt	(date 1616059347145)
@@ -1,14 +1,14 @@
-package com.example.binding.src.join
+package com.makeus6.binding.src.join
 
 import android.content.Intent
 import android.os.Bundle
-import com.example.binding.R
-import com.example.binding.config.BaseActivity
-import com.example.binding.databinding.ActivityJoinBinding
-import com.example.binding.src.join.join1.Join1Fragment
-import com.example.binding.src.join.join2.Join2Fragment
-import com.example.binding.src.join.join3.Join3Fragment
-import com.example.binding.src.login.LoginActivity
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseActivity
+import com.makeus6.binding.databinding.ActivityJoinBinding
+import com.makeus6.binding.src.join.join1.Join1Fragment
+import com.makeus6.binding.src.join.join2.Join2Fragment
+import com.makeus6.binding.src.join.join3.Join3Fragment
+import com.makeus6.binding.src.login.LoginActivity
 
 
 class JoinActivity: BaseActivity<ActivityJoinBinding>(ActivityJoinBinding::inflate){
Index: app/src/main/java/com/example/binding/src/join/done/JoinDoneDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.done\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.fragment.app.DialogFragment\r\nimport com.example.binding.R\r\nimport com.example.binding.databinding.DialogJoinDoneBinding\r\nimport com.example.binding.src.join.JoinActivity\r\n\r\n\r\nclass JoinDoneDialog(context: Context, private val isSuccess: Boolean) : DialogFragment() {\r\n    private var _binding: DialogJoinDoneBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = DialogJoinDoneBinding.inflate(inflater, container, false)\r\n\r\n        val dialog = dialog;\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog?.setCanceledOnTouchOutside(false);\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder: AlertDialog.Builder = AlertDialog.Builder(activity)\r\n        val view: View = activity!!.layoutInflater.inflate(R.layout.dialog_join_done, null)\r\n        builder.setView(view)\r\n        val dialog = builder.create()\r\n\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog?.setCanceledOnTouchOutside(false)\r\n\r\n        // 로그인하러 가기 버튼\r\n        val btn = view.findViewById<Button>(R.id.dialog_btn_login)\r\n        btn.setOnClickListener {\r\n            (activity as JoinActivity).let{\r\n                it.moveToLogin(isSuccess)\r\n                it.finish()\r\n            }\r\n        }\r\n\r\n        return dialog\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/done/JoinDoneDialog.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/done/JoinDoneDialog.kt	(date 1616059346744)
@@ -1,4 +1,4 @@
-package com.example.binding.src.join.done
+package com.makeus6.binding.src.join.done
 
 import android.app.AlertDialog
 import android.app.Dialog
@@ -11,9 +11,9 @@
 import android.view.ViewGroup
 import android.widget.Button
 import androidx.fragment.app.DialogFragment
-import com.example.binding.R
-import com.example.binding.databinding.DialogJoinDoneBinding
-import com.example.binding.src.join.JoinActivity
+import com.makeus6.binding.R
+import com.makeus6.binding.databinding.DialogJoinDoneBinding
+import com.makeus6.binding.src.join.JoinActivity
 
 
 class JoinDoneDialog(context: Context, private val isSuccess: Boolean) : DialogFragment() {
Index: app/src/main/java/com/example/binding/src/join/join1/Join1Service.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join1\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass Join1Service(val view: Join1FragmentView) {\r\n\r\n    // 서버한테 이메일 중복 검사하는 API 실행\r\n    fun tryGetCheckEmail(email: String){\r\n\r\n        val join1RetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            Join1RetrofitInterface::class.java)\r\n\r\n        join1RetrofitInterface.getCheckEmail(email)\r\n            .enqueue(object : Callback<BaseResponse> {\r\n\r\n                override fun onResponse(call: Call<BaseResponse>,\r\n                                        response: Response<BaseResponse>\r\n                ) {\r\n                    view.onGetCheckEmailSuccess(response.body() as BaseResponse, email)\r\n                }\r\n\r\n                override fun onFailure(call: Call<BaseResponse>, t: Throwable) {\r\n                    view.onGetCheckEmailFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join1/Join1Service.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join1/Join1Service.kt	(date 1616059348821)
@@ -1,7 +1,7 @@
-package com.example.binding.src.join.join1
+package com.makeus6.binding.src.join.join1
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseResponse
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/join/join1/Join1FragmentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join1\r\n\r\nimport com.example.binding.config.BaseResponse\r\n\r\ninterface Join1FragmentView {\r\n\r\n    // 이메일 중복 검사 성공, 실패시 콜백 함수\r\n\r\n    fun onGetCheckEmailSuccess(response: BaseResponse, email: String)\r\n\r\n    fun onGetCheckEmailFailure(message: String)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join1/Join1FragmentView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join1/Join1FragmentView.kt	(date 1616059348844)
@@ -1,6 +1,6 @@
-package com.example.binding.src.join.join1
+package com.makeus6.binding.src.join.join1
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 
 interface Join1FragmentView {
 
Index: app/src/main/java/com/example/binding/src/join/join1/Join1RetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join1\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport retrofit2.Call\r\nimport retrofit2.http.*\r\n\r\ninterface Join1RetrofitInterface {\r\n\r\n    // 이메일 중복, 형식 검사 api\r\n    @GET(\"/check-email\")\r\n    fun getCheckEmail(@Query(\"email\") email: String): Call<BaseResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join1/Join1RetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join1/Join1RetrofitInterface.kt	(date 1616059346498)
@@ -1,6 +1,6 @@
-package com.example.binding.src.join.join1
+package com.makeus6.binding.src.join.join1
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import retrofit2.Call
 import retrofit2.http.*
 
Index: app/src/main/java/com/example/binding/src/join/join1/Join1Fragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join1\r\n\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.databinding.FragmentJoin1Binding\r\nimport com.example.binding.src.join.JoinActivity\r\nimport java.util.regex.Pattern\r\n\r\nclass Join1Fragment: BaseFragment<FragmentJoin1Binding>(\r\n    FragmentJoin1Binding::bind,\r\n    R.layout.fragment_join_1\r\n), Join1FragmentView {\r\n    // 이메일 정규식\r\n    // 이메일 host 부에 ..의 중복을 막지 못한다\r\n    // val regExp = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\\\\\.[a-zA-Z]{2,6}$\"\r\n\r\n    // 좀 더 디테일한 패턴\r\n    private val regExp = \"(?:[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+)*|\\\"(?:\" +\r\n            \"[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\\" +\r\n            \"x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9]\" +\r\n            \"(?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}\" +\r\n            \"(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\" +\r\n            \"\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])\"\r\n\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // 에러 메시지, 굵은 선을 감춘다\r\n        binding.join1BadEmail.visibility = View.INVISIBLE\r\n        binding.join1SameEmail.visibility = View.INVISIBLE\r\n        binding.join1LineBold.visibility = View.INVISIBLE\r\n\r\n        // 다음 버튼 클릭\r\n        binding.join1Next.setOnClickListener(onClickNext)\r\n\r\n        // 뒤로가기 버튼 -> 로그인 화면으로 돌아간다\r\n        binding.join1Back.setOnClickListener{\r\n            (activity!! as JoinActivity).moveToLogin(false)\r\n        }\r\n\r\n        // 엔터 -> next 버튼 클릭\r\n        binding.join1Email.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN &&\r\n                (keyCode == KeyEvent.KEYCODE_ENDCALL || keyCode == KeyEvent.KEYCODE_ENTER)\r\n            ){\r\n                binding.join1Next.performClick()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        binding.join1Email.onFocusChangeListener = onFocusChange\r\n\r\n        /*// 입력하는 동안 이메일 형식 검사\r\n        binding.join1Email.addTextChangedListener(emailWatcher)*/\r\n\r\n\r\n\r\n    }\r\n\r\n    // 입력 칸이 포커싱되면 아래에 굵은 선을 보여준다\r\n    private val onFocusChange = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus){\r\n            true -> binding.join1LineBold.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    // 다음 버튼을 클릭하면 이메일 중복 검사 API를 호출한다\r\n    private val onClickNext = View.OnClickListener{\r\n        when(isValidEmail(binding.join1Email.text.toString())){\r\n\r\n            // 형식이 올바르면 중복확인 API 호출\r\n            true -> Join1Service(this).tryGetCheckEmail(binding.join1Email.text.toString())\r\n\r\n            // 형식이 틀리면 에러 문구 출력\r\n            false -> {\r\n                binding.join1SameEmail.visibility = View.INVISIBLE\r\n                binding.join1BadEmail.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    // 정규식으로 이메일 형식 검사하는 함수\r\n    fun isValidEmail(emailAddress: String):Boolean {\r\n        var returnValue = false\r\n\r\n        try\r\n        {\r\n            val p = Pattern.compile(regExp)\r\n            val m = p.matcher(emailAddress)\r\n\r\n            if (m.matches() && emailAddress.length < 30) {\r\n                returnValue = true\r\n            }\r\n\r\n            return returnValue\r\n        }\r\n        catch (e: Exception) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    // 입력하는 중에 이메일 형식 검사\r\n    private val emailWatcher = object: TextWatcher{\r\n\r\n        override fun afterTextChanged(s: Editable?) {}\r\n\r\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n\r\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n            when(isValidEmail(s.toString())){\r\n                true -> binding.join1BadEmail.visibility = View.INVISIBLE\r\n                false -> {\r\n                    binding.join1BadEmail.visibility = View.VISIBLE\r\n                    binding.join1SameEmail.visibility = View.INVISIBLE\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 서버와 통신 성공\r\n    override fun onGetCheckEmailSuccess(response: BaseResponse, email: String) {\r\n        Log.d(\"로그\", \"onGetCheckEmailFailure() called, response: $response\")\r\n\r\n        when(response.code){\r\n\r\n            // 사용 가능한 이메일\r\n            1000 -> {\r\n                Log.d(\"로그\", \"사용가능한 이메일, message: ${response.message}\")\r\n\r\n                // 다음단계 -> 비밀번호 입력 화면으로 이동\r\n                (activity!! as JoinActivity).moveToJoin2(email)\r\n            }\r\n\r\n            // 중복 이메일 -> 중복 이메일 문구를 보여준다\r\n            3000 -> {\r\n                binding.join1BadEmail.visibility = View.INVISIBLE\r\n                binding.join1SameEmail.visibility = View.VISIBLE\r\n            }\r\n\r\n            // 서버에서 이메일 형식 오류로 판정 -> 에러 문구를 보여준다\r\n            else ->{\r\n                Log.d(\"로그\", \"code: ${response.code}, msg: ${response.message}\")\r\n\r\n                binding.join1BadEmail.visibility = View.VISIBLE\r\n                binding.join1SameEmail.visibility = View.INVISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    // 서버 통신 실패\r\n    override fun onGetCheckEmailFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetCheckEmailFailure() called, message: $message\")\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join1/Join1Fragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join1/Join1Fragment.kt	(date 1616059347281)
@@ -1,4 +1,4 @@
-package com.example.binding.src.join.join1
+package com.makeus6.binding.src.join.join1
 
 import android.os.Bundle
 import android.text.Editable
@@ -6,11 +6,11 @@
 import android.util.Log
 import android.view.KeyEvent
 import android.view.View
-import com.example.binding.R
-import com.example.binding.config.BaseFragment
-import com.example.binding.config.BaseResponse
-import com.example.binding.databinding.FragmentJoin1Binding
-import com.example.binding.src.join.JoinActivity
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.databinding.FragmentJoin1Binding
+import com.makeus6.binding.src.join.JoinActivity
 import java.util.regex.Pattern
 
 class Join1Fragment: BaseFragment<FragmentJoin1Binding>(
Index: app/src/main/java/com/example/binding/src/join/join2/Join2Fragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join2\r\n\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.databinding.FragmentJoin1Binding\r\nimport com.example.binding.databinding.FragmentJoin2Binding\r\nimport com.example.binding.src.join.JoinActivity\r\nimport java.util.regex.Pattern\r\n\r\nclass Join2Fragment: BaseFragment<FragmentJoin2Binding>(\r\n    FragmentJoin2Binding::bind,\r\n    R.layout.fragment_join_2\r\n) {\r\n\r\n    // 숫자, 문자, 특수문자 3가지중 최소 2가지는 포함하도록, 8~20자\r\n    // private val pwdRegExp = \"^(?=.*[a-zA-Z0-9])(?=.*[a-zA-Z!@#\\$%^&*])(?=.*[0-9!@#\\$%^&*]).{8,20}$\"\r\n    // 비밀번호, 비밀번호 확인 문자열\r\n    private lateinit var pwdString: String\r\n    private lateinit var pwdChkString: String\r\n    // 전달받은 이메일 주소\r\n    private var email: String? = \"temp_jslkap@naver.com\"\r\n\r\n    // 다음 버튼 클릭 -> 포커싱 해제될 때 실행되는 코드를 막기 위한 플래그\r\n    private var isHere = true\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        isHere = true\r\n\r\n        // 전달 받은 이메일 주소\r\n        email = arguments?.getString(\"email\", \"temp_jslkap@naver.com\")\r\n\r\n        // 비밀번호 오류 메시지를 감춘다\r\n        binding.join2WrongPw.visibility = View.INVISIBLE\r\n\r\n        // 첫번째 text칸 엔터키 -> 아래 editText로 이동\r\n        binding.join2PwLine.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER){\r\n                binding.join2PwChkLine.requestFocus()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 2번째 editText 엔터버튼 클릭 -> 다음 버튼 자동 눌림\r\n        binding.join2PasswordCheck.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN &&\r\n                (keyCode == KeyEvent.KEYCODE_ENDCALL || keyCode == KeyEvent.KEYCODE_ENTER)\r\n            ){\r\n                binding.join2Next.performClick()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 다음 버튼 클릭 -> 비밀번호가 맞으면 닉네임 입력으로 넘어간다\r\n        binding.join2Next.setOnClickListener(onClickNext)\r\n\r\n        // 뒤로가기 버튼 -> 로그인 화면으로 돌아간다\r\n        binding.join2Back.setOnClickListener{\r\n            (activity!! as JoinActivity).moveToLogin(false)\r\n        }\r\n\r\n        // 각 입력칸이 포커싱되면 밑줄이 굵어진다\r\n        binding.join2Password.onFocusChangeListener = onFocusPwd\r\n        binding.join2PasswordCheck.onFocusChangeListener = onFocusPwdChk\r\n\r\n        // 비밀번호 입력할 때 형식 검사\r\n        // binding.join2Password.addTextChangedListener(pwdWatcher)\r\n        // binding.join2PasswordCheck.addTextChangedListener(pwdChkWatcher)\r\n    }\r\n\r\n    // 비밀번호 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusPwd = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus ){\r\n            true -> binding.join2PwLineBold.visibility = View.VISIBLE\r\n            false ->\r\n                if(isHere){\r\n                    binding.join2PwLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    // 비밀번호 확인 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusPwdChk = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus){\r\n            true -> binding.join2PwChkLineBold.visibility = View.VISIBLE\r\n            false ->\r\n                if(isHere){\r\n                    binding.join2PwChkLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    // 다음 버튼 클릭\r\n    private val onClickNext = View.OnClickListener {\r\n        pwdString = binding.join2Password.text.toString()\r\n        pwdChkString = binding.join2PasswordCheck.text.toString()\r\n\r\n        /*// 비밀번호 형식이 올바르지 않을 때\r\n        if(!isValidPwd(pwdString)){\r\n            Log.d(\"로그\", \"비밀번호 올바르지 않음\")\r\n            binding.join2WrongPw.let {\r\n                it.text = String.format(\"비밀번호 형식이 맞지 않습니다\")\r\n                it.visibility = View.VISIBLE\r\n            }\r\n        }*/\r\n\r\n        // 비밀번호가 8-20자가 아닐때\r\n        if(pwdString.length < 8 || pwdString.length > 20) {\r\n            Log.d(\"로그\", \"비밀번호 올바르지 않음\")\r\n            binding.join2WrongPw.let {\r\n                it.text = String.format(\"비밀번호 형식이 맞지 않습니다\")\r\n                it.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        // 비밀번호와 비밀번호 확인이 일치하지 않을 때\r\n        else if(pwdString != pwdChkString) {\r\n            Log.d(\"로그\", \"비밀번호 일치x\")\r\n            binding.join2WrongPw.let {\r\n                it.text = String.format(\"비밀번호가 맞지 않습니다\")\r\n                it.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        // 형식이 올바르고, 일치하면 다음 화면으로 넘어간다\r\n        else{\r\n           Log.d(\"로그\", \"비밀번호 다음화면, email: $email\")\r\n            email?.let { email ->\r\n                isHere = false\r\n\r\n                (activity!! as JoinActivity).moveToJoin3(email, pwdString, pwdChkString)\r\n            }\r\n        }\r\n    }\r\n\r\n    // 정규식으로 비밀번호 형식 검사\r\n    /*fun isValidPwd(pwd: String):Boolean {\r\n        var returnValue = false\r\n\r\n        try\r\n        {\r\n            val p = Pattern.compile(pwdRegExp)\r\n            val m = p.matcher(pwd)\r\n\r\n            if (m.matches()) {\r\n                returnValue = true\r\n            }\r\n\r\n            return returnValue\r\n        }\r\n        catch (e: Exception) {\r\n            return false\r\n        }\r\n    }*/\r\n\r\n\r\n    // 비밀번호 입력 중 실시간으로 형식 검사 하는 코드\r\n    /*private val pwdWatcher = object: TextWatcher{\r\n        override fun afterTextChanged(s: Editable?) {}\r\n\r\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n\r\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n            when(isValidPwd(s.toString())){\r\n\r\n                // 비밀번호가 형식이 올바르지 않을 때\r\n                false -> {\r\n                    binding.join2WrongPw.text = String.format(\"비밀번호가 올바르지 않습니다\")\r\n                    binding.join2WrongPw.visibility = View.VISIBLE\r\n                }\r\n\r\n                true -> binding.join2WrongPw.visibility = View.INVISIBLE\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*private val pwdChkWatcher = object: TextWatcher{\r\n        override fun afterTextChanged(s: Editable?) {}\r\n\r\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n\r\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n\r\n        }\r\n    }*/\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join2/Join2Fragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join2/Join2Fragment.kt	(date 1616059360718)
@@ -1,17 +1,13 @@
-package com.example.binding.src.join.join2
+package com.makeus6.binding.src.join.join2
 
 import android.os.Bundle
-import android.text.Editable
-import android.text.TextWatcher
 import android.util.Log
 import android.view.KeyEvent
 import android.view.View
-import com.example.binding.R
-import com.example.binding.config.BaseFragment
-import com.example.binding.databinding.FragmentJoin1Binding
-import com.example.binding.databinding.FragmentJoin2Binding
-import com.example.binding.src.join.JoinActivity
-import java.util.regex.Pattern
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.databinding.FragmentJoin2Binding
+import com.makeus6.binding.src.join.JoinActivity
 
 class Join2Fragment: BaseFragment<FragmentJoin2Binding>(
     FragmentJoin2Binding::bind,
Index: app/src/main/java/com/example/binding/src/join/join3/Join3Fragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join3\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.databinding.FragmentJoin3Binding\r\nimport com.example.binding.src.join.JoinActivity\r\nimport com.example.binding.src.join.join3.models.PostJoinBody\r\nimport com.example.binding.src.join.done.JoinDoneDialog\r\nimport java.util.regex.Pattern\r\n\r\nclass Join3Fragment: BaseFragment<FragmentJoin3Binding>(\r\n    FragmentJoin3Binding::bind,\r\n    R.layout.fragment_join_3\r\n), Join3FragmentView {\r\n\r\n    // 한글(자음+모음+공백+언더바+숫자)만 허용하는 정규표현식, 2~8자\r\n    // private val regExp =  \"^(?=.*[ㄱ-ㅎ|ㅏ-ㅣ|가-힣\\\\s_0-9]).{2,8}$\"\r\n\r\n    // 한글(자음+모음)만 허용하는 식, 2~8자\r\n    // private val regExp = \"^(?=.*[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]).{2,8}$\"\r\n    private val regExp = \"^(?=.*[가-힣]).{2,8}$\"\r\n    // 입력받은 닉네임 저장 변수\r\n    lateinit var nickname: String\r\n    // 넘겨받은 이메일 주소, 비밀번호, 비밀번호 확인 임시 값\r\n    /*private var email = \"temp_ghdtkdgh5@naver.com\"\r\n    private var pwd = \"12345678a\"\r\n    private var pwdChk = \"12345678a\"*/\r\n\r\n    private var isHere = true\r\n\r\n    // 넘겨받은 이메일 주소, 비밀번호, 비밀번호 확인\r\n    lateinit var email: String\r\n    lateinit var pwd: String\r\n    lateinit var pwdChk: String\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        isHere = true\r\n\r\n        // 넘겨받은 이메일 주소, 비밀번호, 비밀번호 확인\r\n        email = arguments?.getString(\"email\",\"temp_ghdtkdgh5@naver.com\").toString()\r\n        pwd = arguments?.getString(\"pwd\",\"12345678a\").toString()\r\n        pwdChk = arguments?.getString(\"pwdChk\",\"12345678a\").toString()\r\n\r\n        // 다음 버튼 클릭 -> 닉네임 형식이 올바르면 중복 닉네임 api 호출\r\n        binding.join3Next.setOnClickListener(onClickNext)\r\n\r\n        // 엔터키 -> 다음 버튼\r\n        binding.join3Name.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN &&\r\n                (keyCode == KeyEvent.KEYCODE_ENDCALL || keyCode == KeyEvent.KEYCODE_ENTER)\r\n            ){\r\n                binding.join3Next.performClick()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 에러 메세지들을 감춘다.\r\n        binding.join3WrongNickname.visibility = View.INVISIBLE\r\n        binding.join3SameNickname.visibility = View.INVISIBLE\r\n\r\n        // 뒤로가기 버튼 -> 로그인 화면으로 돌아간다\r\n        binding.join3Back.setOnClickListener{\r\n            (activity!! as JoinActivity).moveToLogin(false)\r\n        }\r\n    }\r\n\r\n    private val onClickNext = View.OnClickListener {\r\n\r\n        // 입력 받은 닉네임\r\n        nickname = binding.join3Name.text.toString()\r\n\r\n        // 닉네임 형식이 올바르지 않으면 에러 메시지를 보여준다\r\n        if(!isValidNickname(nickname)){\r\n            Log.d(\"로그\",\"nickname: $nickname , isValid: ${isValidNickname(nickname)}\")\r\n\r\n            binding.join3SameNickname.visibility = View.INVISIBLE\r\n            binding.join3WrongNickname.visibility = View.VISIBLE\r\n        }\r\n        // 형식이 올바르면 중복 닉네임 검사 + 회원가입 api 호출\r\n        else{\r\n            val joinBody = PostJoinBody(email, pwd, pwdChk, nickname)\r\n            Log.d(\"로그\",\"회원가입 api 호출 - postJoinBody: $joinBody\")\r\n            Join3Service(this).tryPostJoin(joinBody)\r\n        }\r\n    }\r\n\r\n    // 정규식으로 한글 닉네임 형식 검사\r\n    private fun isValidNickname(nickname: String):Boolean {\r\n        var returnValue = false\r\n\r\n        try\r\n        {\r\n            val p = Pattern.compile(regExp)\r\n            val m = p.matcher(nickname)\r\n\r\n            if (m.matches()) {\r\n                returnValue = true\r\n            }\r\n\r\n            return returnValue\r\n        }\r\n        catch (e: Exception) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    // 회원가입 api 통신 성공\r\n    override fun onPostJoinSuccess(response: BaseResponse) {\r\n        Log.d(\"로그\", \"onPostJoinSuccess() called, response: $response\")\r\n\r\n        when(response.code){\r\n\r\n            // 회원가입에 성공 -> 로그인 액티비티로 돌아간다\r\n            1000 -> {\r\n                Log.d(\"로그\", \"회원가입 성공 - message: ${response.message}\")\r\n\r\n                isHere = false\r\n                // 회원가입 완료 화면을 띄운다\r\n                val mJoinDialog = JoinDoneDialog(activity as Context, response.isSuccess)\r\n                val fragmentManager = childFragmentManager\r\n                mJoinDialog.show(fragmentManager, \"join_done\")\r\n            }\r\n\r\n            // 닉네임 형식 오류\r\n            in 2007..2009 -> {\r\n                Log.d(\"로그\", \"회원가입 실패 - message: ${response.message},\" +\r\n                        \" code: ${response.code}\")\r\n\r\n                binding.join3WrongNickname.visibility = View.VISIBLE\r\n                binding.join3SameNickname.visibility = View.INVISIBLE\r\n            }\r\n\r\n            // 이미 사용중인 닉네임\r\n            3001 -> {\r\n                Log.d(\"로그\", \"회원가입 실패 - message: ${response.message},\" +\r\n                        \" code: ${response.code}\")\r\n\r\n                binding.join3WrongNickname.visibility = View.INVISIBLE\r\n                binding.join3SameNickname.visibility = View.VISIBLE\r\n            }\r\n\r\n            // 회원가입 실패\r\n            else -> {\r\n                Log.d(\"로그\", \"회원가입 실패 - message: ${response.message},\" +\r\n                        \" code: ${response.code}\")\r\n\r\n                binding.join3SameNickname.visibility = View.INVISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    // 회원가입 api 통신 실패\r\n    override fun onPostJoinFailure(message: String) {\r\n        Log.d(\"로그\", \"onPostJoinFailure() called, message: $message\")\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join3/Join3Fragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join3/Join3Fragment.kt	(date 1616059348770)
@@ -1,17 +1,17 @@
-package com.example.binding.src.join.join3
+package com.makeus6.binding.src.join.join3
 
 import android.content.Context
 import android.os.Bundle
 import android.util.Log
 import android.view.KeyEvent
 import android.view.View
-import com.example.binding.R
-import com.example.binding.config.BaseFragment
-import com.example.binding.config.BaseResponse
-import com.example.binding.databinding.FragmentJoin3Binding
-import com.example.binding.src.join.JoinActivity
-import com.example.binding.src.join.join3.models.PostJoinBody
-import com.example.binding.src.join.done.JoinDoneDialog
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.databinding.FragmentJoin3Binding
+import com.makeus6.binding.src.join.JoinActivity
+import com.makeus6.binding.src.join.join3.models.PostJoinBody
+import com.makeus6.binding.src.join.done.JoinDoneDialog
 import java.util.regex.Pattern
 
 class Join3Fragment: BaseFragment<FragmentJoin3Binding>(
Index: app/src/main/java/com/example/binding/src/join/join3/Join3RetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join3\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.join.join3.models.PostJoinBody\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.POST\r\n\r\ninterface Join3RetrofitInterface {\r\n\r\n    // 회원가입 요청 api\r\n    @POST(\"/sign-up\")\r\n    fun postJoin(@Body params: PostJoinBody): Call<BaseResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join3/Join3RetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join3/Join3RetrofitInterface.kt	(date 1616059348739)
@@ -1,7 +1,7 @@
-package com.example.binding.src.join.join3
+package com.makeus6.binding.src.join.join3
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.join.join3.models.PostJoinBody
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.join.join3.models.PostJoinBody
 import retrofit2.Call
 import retrofit2.http.Body
 import retrofit2.http.POST
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    ext.kotlin_version = \"1.3.72\"\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.1.2'\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ build.gradle	(date 1616059876472)
@@ -8,6 +8,8 @@
     dependencies {
         classpath 'com.android.tools.build:gradle:4.1.2'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+        // firebase
+        classpath 'com.google.gms:google-services:4.3.5'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: app/src/main/java/com/example/binding/src/join/join3/Join3Service.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join3\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.join.join3.models.PostJoinBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass Join3Service(val view: Join3FragmentView) {\r\n\r\n    // 서버에 회원가입 요청하는 API 호출\r\n    fun tryPostJoin(joinBody: PostJoinBody){\r\n\r\n        val join3RetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            Join3RetrofitInterface::class.java)\r\n\r\n        join3RetrofitInterface.postJoin(joinBody)\r\n            .enqueue(object : Callback<BaseResponse> {\r\n\r\n                override fun onResponse(call: Call<BaseResponse>,\r\n                                        response: Response<BaseResponse>\r\n                ) {\r\n                    view.onPostJoinSuccess(response.body() as BaseResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<BaseResponse>, t: Throwable) {\r\n                    view.onPostJoinFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join3/Join3Service.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join3/Join3Service.kt	(date 1616059348896)
@@ -1,8 +1,8 @@
-package com.example.binding.src.join.join3
+package com.makeus6.binding.src.join.join3
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.join.join3.models.PostJoinBody
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.join.join3.models.PostJoinBody
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/join/join3/Join3FragmentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join3\r\n\r\nimport com.example.binding.config.BaseResponse\r\n\r\ninterface Join3FragmentView {\r\n\r\n    // 회원가입 요청 api 콜백 함수\r\n\r\n    fun onPostJoinSuccess(response: BaseResponse)\r\n\r\n    fun onPostJoinFailure(message: String)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/join/join3/Join3FragmentView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join3/Join3FragmentView.kt	(date 1616059348910)
@@ -1,6 +1,6 @@
-package com.example.binding.src.join.join3
+package com.makeus6.binding.src.join.join3
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 
 interface Join3FragmentView {
 
Index: app/src/main/java/com/example/binding/src/join/join3/models/PostJoinBody.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.join.join3.models\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class PostJoinBody (\r\n    @SerializedName(\"email\") val email: String,\r\n    @SerializedName(\"password\") val pwd: String,\r\n    @SerializedName(\"passwordCheck\") val pwdChk: String,\r\n    @SerializedName(\"nickname\") val nickname: String\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/join/join3/models/PostJoinBody.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/join/join3/models/PostJoinBody.kt	(date 1616059347094)
@@ -1,4 +1,4 @@
-package com.example.binding.src.join.join3.models
+package com.makeus6.binding.src.join.join3.models
 
 import com.google.gson.annotations.SerializedName
 
Index: app/src/main/java/com/example/binding/src/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main\r\n\r\nimport android.os.Bundle\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseActivity\r\nimport com.example.binding.databinding.ActivityMainBinding\r\nimport com.example.binding.src.main.home.HomeFragment\r\nimport com.example.binding.src.main.menu.MenuFragment\r\nimport com.example.binding.src.main.my_page.MyPageFragment\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\n\r\nclass MainActivity : BaseActivity<ActivityMainBinding>(ActivityMainBinding::inflate) {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // 처음 화면이 켜졌을 때 활성화될 하단 버튼 - 실제 화면이 아닌 버튼에만 적용\r\n        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_menu\r\n\r\n        // 메뉴 프래그먼트로 진입\r\n        supportFragmentManager.beginTransaction()\r\n            .add(R.id.main_frm, HomeFragment())\r\n            .commitAllowingStateLoss()\r\n\r\n        // 아이콘 틴트는 셀렉터로 적용\r\n        binding.mainBtmNav.itemIconTintList = null\r\n\r\n        // 탭을 선택했을 때 프래그먼트 화면 전환\r\n        binding.mainBtmNav.setOnNavigationItemSelectedListener(\r\n            BottomNavigationView.OnNavigationItemSelectedListener { item ->\r\n                when (item.itemId) {\r\n                    R.id.menu_main_btm_nav_home -> {\r\n                        supportFragmentManager.beginTransaction()\r\n                            .replace(R.id.main_frm, HomeFragment())\r\n                            .commitAllowingStateLoss()\r\n                        return@OnNavigationItemSelectedListener true\r\n                    }\r\n                    R.id.menu_main_btm_nav_menu -> {\r\n                        supportFragmentManager.beginTransaction()\r\n                            .replace(R.id.main_frm, MenuFragment())\r\n                            .commitAllowingStateLoss()\r\n                        return@OnNavigationItemSelectedListener true\r\n                    }\r\n                    R.id.menu_main_btm_nav_my_page -> {\r\n                        supportFragmentManager.beginTransaction()\r\n                            .replace(R.id.main_frm, MyPageFragment())\r\n                            .commitAllowingStateLoss()\r\n                    }\r\n                }\r\n                false\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/MainActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/MainActivity.kt	(date 1616091206799)
@@ -1,12 +1,12 @@
-package com.example.binding.src.main
+package com.makeus6.binding.src.main
 
 import android.os.Bundle
-import com.example.binding.R
-import com.example.binding.config.BaseActivity
-import com.example.binding.databinding.ActivityMainBinding
-import com.example.binding.src.main.home.HomeFragment
-import com.example.binding.src.main.menu.MenuFragment
-import com.example.binding.src.main.my_page.MyPageFragment
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseActivity
+import com.makeus6.binding.databinding.ActivityMainBinding
+import com.makeus6.binding.src.main.home.HomeFragment
+import com.makeus6.binding.src.main.menu.MenuFragment
+import com.makeus6.binding.src.main.my_page.MyPageFragment
 import com.google.android.material.bottomnavigation.BottomNavigationView
 
 class MainActivity : BaseActivity<ActivityMainBinding>(ActivityMainBinding::inflate) {
@@ -14,7 +14,7 @@
         super.onCreate(savedInstanceState)
 
         // 처음 화면이 켜졌을 때 활성화될 하단 버튼 - 실제 화면이 아닌 버튼에만 적용
-        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_menu
+        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_home
 
         // 메뉴 프래그먼트로 진입
         supportFragmentManager.beginTransaction()
@@ -29,18 +29,21 @@
             BottomNavigationView.OnNavigationItemSelectedListener { item ->
                 when (item.itemId) {
                     R.id.menu_main_btm_nav_home -> {
+                        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_home
                         supportFragmentManager.beginTransaction()
                             .replace(R.id.main_frm, HomeFragment())
                             .commitAllowingStateLoss()
                         return@OnNavigationItemSelectedListener true
                     }
                     R.id.menu_main_btm_nav_menu -> {
+                        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_menu
                         supportFragmentManager.beginTransaction()
                             .replace(R.id.main_frm, MenuFragment())
                             .commitAllowingStateLoss()
                         return@OnNavigationItemSelectedListener true
                     }
                     R.id.menu_main_btm_nav_my_page -> {
+                        binding.mainBtmNav.selectedItemId = R.id.menu_main_btm_nav_my_page
                         supportFragmentManager.beginTransaction()
                             .replace(R.id.main_frm, MyPageFragment())
                             .commitAllowingStateLoss()
Index: app/src/main/java/com/example/binding/src/main/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.binding.R\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.databinding.FragmentHomeBinding\r\nimport com.example.binding.databinding.FragmentJoin2Binding\r\nimport com.example.binding.src.main.home.models.GetNewestResponse\r\nimport com.example.binding.src.main.home.models.GetPopularResponse\r\nimport com.example.binding.src.main.home.models.NewestResult\r\nimport com.example.binding.src.main.home.models.PopularResult\r\n\r\nclass HomeFragment: BaseFragment<FragmentHomeBinding>(\r\n    FragmentHomeBinding::bind,\r\n    R.layout.fragment_home\r\n), HomeFragmentView{\r\n    private val sp = ApplicationClass.sSharedPreferences\r\n\r\n    private var newestBooksList = ArrayList<NewestResult>()\r\n    private var popularBooksList = ArrayList<PopularResult>()\r\n    private var categoryFlag = 0    // 0 - 최신글 / 1 - 인기글\r\n\r\n    lateinit var homeRecyclerAdapter: HomeRecyclerViewAdapter\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // 최근 적용한 필터가 인기글인지 최신글인지 확인\r\n        categoryFlag = sp.getInt(\"homeCategory\", 0)\r\n\r\n        // 책방 리사이클러 뷰 초기화\r\n        homeRecyclerAdapter = HomeRecyclerViewAdapter(this,\r\n            newestBooksList, popularBooksList, categoryFlag\r\n        )\r\n        binding.homeRecycler.adapter = homeRecyclerAdapter\r\n        binding.homeRecycler.layoutManager = LinearLayoutManager(\r\n            context, LinearLayoutManager.VERTICAL, false\r\n        )\r\n\r\n        // 책방 불러오기\r\n        showLoadingDialog(context!!)\r\n        when(binding.homeSortTxt.text.toString()){\r\n            \"최신글\" -> HomeService(this).tryGetNewest()\r\n            \"인기글\" -> HomeService(this).tryGetPopular()\r\n        }\r\n\r\n        // 글 카테고리 선택(탭) 버튼 클릭\r\n        binding.homeSortBtn.setOnClickListener(onClickTab)\r\n\r\n        // sort tab 안에서 최신글 / 인기글 클릭 -> 필터링 적용\r\n        binding.homeSortNewest.setOnClickListener(onClickNewest)\r\n        binding.homeSortPopular.setOnClickListener(onClickPopular)\r\n\r\n        // 카테고리 선택 창이 열려있을 때 RecyclerView를 터치하면 item이 터치되지 않고,\r\n        // 선택 창이 닫힌다.\r\n        binding.homeRecycler.setOnTouchListener(onTouchRecyclerView)\r\n    }\r\n\r\n    // 최신글 필터링 적용\r\n    private val onClickNewest = View.OnClickListener {\r\n\r\n        if(categoryFlag != 0){\r\n            // 탭 버튼 글 변경\r\n            binding.homeSortTxt.text = String.format(\"최신글\")\r\n\r\n            // 최신글 불러온다 -> sp에 categoryFlag 저장 포함\r\n            HomeService(this).tryGetNewest()\r\n        }\r\n        // 탭화면 닫는다\r\n        binding.homeSortTab.visibility = View.GONE\r\n    }\r\n\r\n    // 인기글 필터링 적용\r\n    private val onClickPopular = View.OnClickListener {\r\n\r\n        if(categoryFlag != 1){\r\n            // 탭 버튼 글 변경\r\n            binding.homeSortTxt.text = String.format(\"인기글\")\r\n\r\n            // 인기글 불러온다 -> sp에 categoryFlag 저장 포함\r\n            HomeService(this).tryGetPopular()\r\n        }\r\n        // 탭화면 닫는다\r\n        binding.homeSortTab.visibility = View.GONE\r\n\r\n    }\r\n\r\n    // 글 카테고리 선택 버튼 클릭 리스너\r\n    private val onClickTab = View.OnClickListener {\r\n        val homeSortTab = binding.homeSortTab\r\n        when(homeSortTab.visibility){\r\n            View.VISIBLE -> homeSortTab.visibility = View.GONE\r\n            else -> homeSortTab.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    // 리사이클러뷰 터치 리스너\r\n    private val onTouchRecyclerView = View.OnTouchListener { v, event ->\r\n        if(binding.homeSortTab.visibility == View.VISIBLE){\r\n            binding.homeSortTab.visibility = View.GONE\r\n            true\r\n        }\r\n        v.performClick()\r\n    }\r\n\r\n    // 최신순 책방 불러오기 통신 성공\r\n    override fun onGetNewestSuccess(response: GetNewestResponse) {\r\n        Log.d(\"로그\", \"onGetNewestSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n\r\n            // 성공\r\n            1000 -> {\r\n                Log.d(\"로그\", \"최신순 책방 불러오기 성공\")\r\n\r\n                categoryFlag = 0\r\n                homeRecyclerAdapter.updateNewest(response.result, categoryFlag)\r\n                sp.edit().putInt(\"homeCategory\", categoryFlag).apply()\r\n            }\r\n\r\n            // 책방이 없음\r\n            4000 -> Log.d(\"로그\", \"서버에 최신순 책방 데이터가 없음\")\r\n\r\n            //실패\r\n            else -> Log.d(\"로그\", \"최신순 책방 불러오기 실패, message: ${response.message}\")\r\n        }\r\n    }\r\n\r\n    // 최신순 책방 불러오기 통신 실패\r\n    override fun onGetNewestFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetNewestFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n    // 인기순 책방 불러오기 통신 성공\r\n    override fun onGetPopularSuccess(response: GetPopularResponse) {\r\n        Log.d(\"로그\", \"onGetPopularSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n\r\n            // 성공\r\n            1000 -> {\r\n                Log.d(\"로그\", \"인기순 책방 불러오기 성공\")\r\n\r\n                categoryFlag = 1\r\n                homeRecyclerAdapter.updatePopular(response.result, categoryFlag)\r\n                sp.edit().putInt(\"homeCategory\", categoryFlag).apply()\r\n            }\r\n\r\n            // 책방이 없음\r\n            4000 -> Log.d(\"로그\", \"서버에 최신순 책방 데이터가 없음\")\r\n\r\n            //실패\r\n            else -> Log.d(\"로그\", \"최신순 책방 불러오기 실패, message: ${response.message}\")\r\n        }\r\n\r\n    }\r\n\r\n    // 인기순 책방 불러오기 통신 실패\r\n    override fun onGetPopularFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetPopularFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/HomeFragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/HomeFragment.kt	(date 1616153592609)
@@ -1,25 +1,38 @@
-package com.example.binding.src.main.home
+package com.makeus6.binding.src.main.home
 
 import android.annotation.SuppressLint
+import android.app.SearchManager
+import android.content.Context
+import android.graphics.Color
+import android.media.Image
 import android.os.Bundle
+import android.text.Html
 import android.util.Log
+import android.util.TypedValue
+import android.view.Menu
+import android.view.MenuInflater
 import android.view.View
+import android.widget.EditText
+import android.widget.ImageView
+import android.widget.LinearLayout
+import androidx.appcompat.widget.SearchView
 import androidx.recyclerview.widget.LinearLayoutManager
-import com.example.binding.R
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseFragment
-import com.example.binding.config.BaseResponse
-import com.example.binding.databinding.FragmentHomeBinding
-import com.example.binding.databinding.FragmentJoin2Binding
-import com.example.binding.src.main.home.models.GetNewestResponse
-import com.example.binding.src.main.home.models.GetPopularResponse
-import com.example.binding.src.main.home.models.NewestResult
-import com.example.binding.src.main.home.models.PopularResult
+import com.makeus6.binding.R
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.databinding.FragmentHomeBinding
+import com.makeus6.binding.src.main.home.create_room.CreateRoomDialog
+import com.makeus6.binding.src.main.home.models.*
+import androidx.appcompat.widget.Toolbar
+import androidx.core.view.MenuItemCompat
+import androidx.core.view.contains
+import com.makeus6.binding.src.main.MainActivity
+import java.util.*
 
 class HomeFragment: BaseFragment<FragmentHomeBinding>(
     FragmentHomeBinding::bind,
     R.layout.fragment_home
-), HomeFragmentView{
+), HomeFragmentView, SearchView.OnQueryTextListener{
     private val sp = ApplicationClass.sSharedPreferences
 
     private var newestBooksList = ArrayList<NewestResult>()
@@ -28,6 +41,9 @@
 
     lateinit var homeRecyclerAdapter: HomeRecyclerViewAdapter
 
+    private lateinit var mSearchView: SearchView
+    private lateinit var searchEditText: EditText
+
     @SuppressLint("ClickableViewAccessibility")
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
@@ -61,6 +77,55 @@
         // 카테고리 선택 창이 열려있을 때 RecyclerView를 터치하면 item이 터치되지 않고,
         // 선택 창이 닫힌다.
         binding.homeRecycler.setOnTouchListener(onTouchRecyclerView)
+
+        // 책방 만들기 버튼 클릭
+        binding.homeCreateRoom.setOnClickListener(onClickCreateRoom)
+
+        // 액션바 설정
+        val toolbar = binding.toolbar
+        toolbar.inflateMenu(R.menu.menu_home_toolbar)
+        mSearchView = toolbar.menu.findItem(R.id.menu_home_toolbar_search).actionView as SearchView
+
+        mSearchView.apply{
+            this.setIconifiedByDefault(false)
+
+            this.queryHint = String.format("책 제목을 입력해주세요")
+
+            this.isSubmitButtonEnabled = true
+
+            val searchSubmit = this.findViewById<ImageView>(androidx.appcompat.R.id.search_go_btn)
+            searchSubmit.setImageResource(R.drawable.search_25)
+
+            this.setOnQueryTextListener(this@HomeFragment)
+
+            this.setOnQueryTextFocusChangeListener { v, hasExpanded ->
+                when(hasExpanded){
+                    true -> {}
+                    false -> {}
+                }
+            }
+
+            // 텍스트 앞의 hint icon 제거
+            val hintIcon = this.findViewById<ImageView>(androidx.appcompat.R.id.search_mag_icon)
+            hintIcon.layoutParams = LinearLayout.LayoutParams(0,0)
+
+            // 서치뷰에서 에딧텍스트를 가져온다
+            searchEditText = this.findViewById(androidx.appcompat.R.id.search_src_text)
+        }
+        searchEditText = mSearchView.findViewById(androidx.appcompat.R.id.search_src_text)
+        searchEditText.apply{
+            this.setTextColor(resources.getColor(R.color.colorPrimaryDark))
+            this.setHintTextColor(resources.getColor(R.color.colorPrimaryGray60))
+            this.setTextSize(TypedValue.COMPLEX_UNIT_SP ,15F)
+
+        }
+    }
+
+    // 책방 추가 버튼 리스너
+    private val onClickCreateRoom = View.OnClickListener {
+        val dialog = CreateRoomDialog(context!!)
+        val fragmentManager = childFragmentManager
+        dialog.show(fragmentManager, "create_room")
     }
 
     // 최신글 필터링 적용
@@ -174,4 +239,24 @@
 
         showCustomToast("네트워크 확인 후 다시 시도해주세요.")
     }
+
+    // 책방 검색 통신 성공
+    override fun onGetSearchSuccess(response: GetSearchResponse) {
+
+    }
+
+    // 책방 검색 통신 실패
+    override fun onGetSearchFailure(message: String) {
+
+    }
+
+    // 서치뷰 검색어 입력 리스너
+    override fun onQueryTextSubmit(query: String?): Boolean {
+        return true
+    }
+
+    //
+    override fun onQueryTextChange(newText: String?): Boolean {
+        return true
+    }
 }
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-android-extensions'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    viewBinding {\r\n        enabled = true\r\n    }\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.binding\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n\r\n    implementation 'androidx.core:core-ktx:1.3.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'androidx.annotation:annotation:1.1.0'\r\n\r\n    implementation 'com.makeramen:roundedimageview:2.3.0'\r\n\r\n    // https://github.com/square/retrofit\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n\r\n    // https://github.com/square/okhttp\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.9.0\")\r\n\r\n    // https://github.com/square/retrofit/tree/master/retrofit-converters/gson\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n\r\n    // https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor\r\n    implementation(\"com.squareup.okhttp3:logging-interceptor:4.9.0\")\r\n\r\n    // https://github.com/ybq/Android-SpinKit\r\n    implementation 'com.github.ybq:Android-SpinKit:1.4.0'\r\n\r\n    // 글라이드 이미지 라이브러리\r\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'\r\n\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n\r\n    testImplementation 'junit:junit:4.13.1'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/build.gradle	(date 1616060082011)
@@ -2,6 +2,7 @@
     id 'com.android.application'
     id 'kotlin-android'
     id 'kotlin-android-extensions'
+    id 'com.google.gms.google-services'
 }
 
 android {
@@ -13,7 +14,7 @@
     }
 
     defaultConfig {
-        applicationId "com.example.binding"
+        applicationId "com.makeus6.binding"
         minSdkVersion 21
         targetSdkVersion 29
         versionCode 1
@@ -68,6 +69,13 @@
     implementation 'com.github.bumptech.glide:glide:4.12.0'
     annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
 
+    // Import the Firebase BoM
+    implementation platform('com.google.firebase:firebase-bom:26.7.0')
+
+    // Add the dependency for the Firebase SDK for Google Analytics
+    // When using the BoM, don't specify versions in Firebase dependencies
+    implementation 'com.google.firebase:firebase-analytics-ktx'
+
     implementation 'androidx.legacy:legacy-support-v4:1.0.0'
 
     testImplementation 'junit:junit:4.13.1'
Index: app/src/main/java/com/example/binding/src/main/home/HomeFragmentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home\r\n\r\nimport com.example.binding.src.main.home.models.GetNewestResponse\r\nimport com.example.binding.src.main.home.models.GetPopularResponse\r\n\r\ninterface HomeFragmentView {\r\n\r\n    // 최신순 책방조회 콜백 함수\r\n    fun onGetNewestSuccess(response: GetNewestResponse)\r\n\r\n    fun onGetNewestFailure(message: String)\r\n\r\n    // 인기순 책방조회 콜백 함수\r\n    fun onGetPopularSuccess(response: GetPopularResponse)\r\n\r\n    fun onGetPopularFailure(message: String)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/HomeFragmentView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/HomeFragmentView.kt	(date 1616059346448)
@@ -1,7 +1,8 @@
-package com.example.binding.src.main.home
+package com.makeus6.binding.src.main.home
 
-import com.example.binding.src.main.home.models.GetNewestResponse
-import com.example.binding.src.main.home.models.GetPopularResponse
+import com.makeus6.binding.src.main.home.models.GetNewestResponse
+import com.makeus6.binding.src.main.home.models.GetPopularResponse
+import com.makeus6.binding.src.main.home.models.GetSearchResponse
 
 interface HomeFragmentView {
 
@@ -14,4 +15,9 @@
     fun onGetPopularSuccess(response: GetPopularResponse)
 
     fun onGetPopularFailure(message: String)
+
+    // 책방 검색 콜백 함수
+    fun onGetSearchSuccess(response: GetSearchResponse)
+
+    fun onGetSearchFailure(message: String)
 }
\ No newline at end of file
Index: app/src/main/java/com/example/binding/src/main/home/HomeRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.join.join3.models.PostJoinBody\r\nimport com.example.binding.src.main.home.models.GetNewestResponse\r\nimport com.example.binding.src.main.home.models.GetPopularResponse\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.POST\r\nimport retrofit2.http.Query\r\n\r\ninterface HomeRetrofitInterface {\r\n\r\n    // 책방 최신순 api\r\n    @GET(\"/books/newest-books\")\r\n    fun getNewest(@Query(\"page\") page: Int,\r\n                 @Query(\"limit\") limit: Int\r\n    ): Call<GetNewestResponse>\r\n\r\n    // 책방 인기순 api\r\n    @GET(\"/books/popularity-books\")\r\n    fun getPopular(@Query(\"page\") page: Int,\r\n                  @Query(\"limit\") limit: Int\r\n    ): Call<GetPopularResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/HomeRetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/HomeRetrofitInterface.kt	(date 1616059361045)
@@ -1,13 +1,10 @@
-package com.example.binding.src.main.home
+package com.makeus6.binding.src.main.home
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.join.join3.models.PostJoinBody
-import com.example.binding.src.main.home.models.GetNewestResponse
-import com.example.binding.src.main.home.models.GetPopularResponse
+import com.makeus6.binding.src.main.home.models.GetNewestResponse
+import com.makeus6.binding.src.main.home.models.GetPopularResponse
+import com.makeus6.binding.src.main.home.models.GetSearchResponse
 import retrofit2.Call
-import retrofit2.http.Body
 import retrofit2.http.GET
-import retrofit2.http.POST
 import retrofit2.http.Query
 
 interface HomeRetrofitInterface {
@@ -23,4 +20,10 @@
     fun getPopular(@Query("page") page: Int,
                   @Query("limit") limit: Int
     ): Call<GetPopularResponse>
+
+
+    // 책방 검색 api
+    @GET("/books?bookName")
+    fun getSearchBooks(@Query("bookName") bookName: String): Call<GetSearchResponse>
+
 }
\ No newline at end of file
Index: app/src/main/java/com/example/binding/src/main/home/HomeRecyclerViewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home\r\n\r\nimport android.content.Context\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.example.binding.R\r\nimport com.example.binding.src.main.home.models.NewestResult\r\nimport com.example.binding.src.main.home.models.PopularResult\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\nimport com.makeramen.roundedimageview.RoundedImageView\r\nimport kotlinx.android.synthetic.main.item_book.view.*\r\n\r\nclass HomeRecyclerViewAdapter(private val homeFragment: HomeFragment,\r\n                              private var newestList: ArrayList<NewestResult>,\r\n                              private var popularList: ArrayList<PopularResult>,\r\n                              private var categoryFlag: Int\r\n): RecyclerView.Adapter<HomeRecyclerViewAdapter.BookHolder>() {\r\n\r\n    override fun onCreateViewHolder(\r\n        parent: ViewGroup,\r\n        viewType: Int\r\n    ): HomeRecyclerViewAdapter.BookHolder {\r\n        val viewHolder = BookHolder(LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.item_book, parent, false)\r\n        )\r\n        return viewHolder\r\n    }\r\n\r\n\r\n    override fun getItemCount(): Int {\r\n        return when(categoryFlag){\r\n            0 -> newestList.size\r\n            else -> popularList.size\r\n        }\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: HomeRecyclerViewAdapter.BookHolder, position: Int) {\r\n\r\n        // 사용자 선택에 따라 최신글 or 인기글 데이터 연결\r\n        if(categoryFlag == 0){\r\n            holder.bindNewestValue(newestList[position])\r\n        }else if(categoryFlag == 1){\r\n            holder.bindPopularValue(popularList[position])\r\n        }\r\n    }\r\n\r\n    inner class BookHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        private val view: View = itemView\r\n        private val bookTitle: TextView = itemView.item_book_title\r\n        private val bookAuthor: TextView = itemView.item_book_author\r\n        private val numOfPost: TextView = itemView.item_book_post_amount\r\n        private val bookImg: RoundedImageView = itemView.item_book_image\r\n\r\n        // 최신글\r\n        fun bindNewestValue(bookData: NewestResult){\r\n            bookTitle.text = bookData.bookName\r\n            bookAuthor.text = bookData.authorName\r\n            numOfPost.text = bookData.contentsCount\r\n\r\n            Glide.with(homeFragment)\r\n                .load(bookData.bookImgUrl)\r\n                .error(R.drawable.icon_app)\r\n                .placeholder(R.drawable.icon_app)\r\n                .into(bookImg)\r\n        }\r\n\r\n        // 인기글\r\n        fun bindPopularValue(bookData: PopularResult){\r\n            bookTitle.text = bookData.bookName\r\n            bookAuthor.text = bookData.authorName\r\n            numOfPost.text = bookData.contentsCount\r\n\r\n            Glide.with(homeFragment)\r\n                .load(bookData.bookImgUrl)\r\n                .error(R.drawable.icon_app)\r\n                .placeholder(R.drawable.icon_app)\r\n                .into(bookImg)\r\n        }\r\n    }\r\n\r\n    fun updateNewest(nList: ArrayList<NewestResult>, flag: Int){\r\n        newestList = nList\r\n        notifyDataSetChanged()\r\n        categoryFlag = flag\r\n    }\r\n\r\n    fun updatePopular(pList: ArrayList<PopularResult>, flag: Int){\r\n        popularList = pList\r\n        notifyDataSetChanged()\r\n        categoryFlag = flag\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/HomeRecyclerViewAdapter.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/HomeRecyclerViewAdapter.kt	(date 1616059361214)
@@ -1,16 +1,14 @@
-package com.example.binding.src.main.home
+package com.makeus6.binding.src.main.home
 
-import android.content.Context
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.TextView
 import androidx.recyclerview.widget.RecyclerView
 import com.bumptech.glide.Glide
-import com.example.binding.R
-import com.example.binding.src.main.home.models.NewestResult
-import com.example.binding.src.main.home.models.PopularResult
-import com.example.binding.src.main.menu.models.StoresResult
+import com.makeus6.binding.R
+import com.makeus6.binding.src.main.home.models.NewestResult
+import com.makeus6.binding.src.main.home.models.PopularResult
 import com.makeramen.roundedimageview.RoundedImageView
 import kotlinx.android.synthetic.main.item_book.view.*
 
Index: app/src/main/java/com/example/binding/src/main/menu/MenuRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.join.join3.models.PostJoinBody\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.POST\r\nimport retrofit2.http.Query\r\n\r\ninterface MenuRetrofitInterface {\r\n\r\n    // 전체 서점 가져오기 api\r\n    @GET(\"/bookstores/all\")\r\n    fun getAllStores(@Query(\"page\") page: Int,\r\n                 @Query(\"limit\") limit: Int\r\n    ): Call<GetStoresResponse>\r\n\r\n    // 특정 지역 서점\r\n    @GET(\"/bookstores\")\r\n    fun getLocationStores(@Query(\"page\") page: Int,\r\n                  @Query(\"limit\") limit: Int,\r\n                   @Query(\"locationfilter\") locationFilter: ArrayList<String>\r\n    ): Call<GetStoresResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/MenuRetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/MenuRetrofitInterface.kt	(date 1616059361187)
@@ -1,12 +1,8 @@
-package com.example.binding.src.main.menu
+package com.makeus6.binding.src.main.menu
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.join.join3.models.PostJoinBody
-import com.example.binding.src.main.menu.models.GetStoresResponse
+import com.makeus6.binding.src.main.menu.models.GetStoresResponse
 import retrofit2.Call
-import retrofit2.http.Body
 import retrofit2.http.GET
-import retrofit2.http.POST
 import retrofit2.http.Query
 
 interface MenuRetrofitInterface {
Index: app/src/main/java/com/example/binding/src/main/menu/MenuRecyclerViewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.example.binding.R\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\nimport com.example.binding.src.main.menu.store_detail.StoreDetailFragment\r\nimport com.makeramen.roundedimageview.RoundedImageView\r\nimport kotlinx.android.synthetic.main.item_menu.view.*\r\n\r\nclass MenuRecyclerViewAdapter(fragment: MenuFragment):\r\n    RecyclerView.Adapter<MenuRecyclerViewAdapter.StoreViewHolder>() {\r\n\r\n    private var storeList = arrayListOf<StoresResult>()\r\n    private val menuFragment = fragment\r\n\r\n    override fun onCreateViewHolder(\r\n        parent: ViewGroup,\r\n        viewType: Int\r\n    ): MenuRecyclerViewAdapter.StoreViewHolder {\r\n        val viewHolder = StoreViewHolder(\r\n            LayoutInflater.from(parent.context)\r\n                .inflate(R.layout.item_menu, parent, false)\r\n        )\r\n        return viewHolder\r\n    }\r\n\r\n\r\n    override fun getItemCount() = storeList.size\r\n\r\n    override fun onBindViewHolder(holder: MenuRecyclerViewAdapter.StoreViewHolder, position: Int) {\r\n        holder.bindValue(storeList[position])\r\n    }\r\n\r\n    inner class StoreViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        private val item: View = itemView\r\n        private val photo: RoundedImageView = itemView.item_menu_photo\r\n        private val title: TextView = itemView.item_menu_title\r\n        private val address: TextView = itemView.item_menu_address\r\n\r\n        fun bindValue(store: StoresResult){\r\n            Glide.with(menuFragment)\r\n                .load(store.storeImgUrl)\r\n                .error(R.drawable.jangu)\r\n                .into(photo)\r\n\r\n            title.text = store.storeName\r\n            address.text = store.location\r\n\r\n            item.setOnClickListener{\r\n                val fragmentManager = menuFragment.childFragmentManager\r\n                val storeDetailFragment = StoreDetailFragment()\r\n                val idxBundle = Bundle()\r\n                idxBundle.putInt(\"bookStoreIdx\", store.bookstoreIdx)\r\n                storeDetailFragment.arguments = idxBundle\r\n                fragmentManager.beginTransaction()\r\n                    .replace(R.id.menu_root, storeDetailFragment)\r\n                    .commitAllowingStateLoss()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun updateList(newList: ArrayList<StoresResult>){\r\n        storeList = newList\r\n        this.notifyDataSetChanged()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/MenuRecyclerViewAdapter.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/MenuRecyclerViewAdapter.kt	(date 1616059348240)
@@ -1,4 +1,4 @@
-package com.example.binding.src.main.menu
+package com.makeus6.binding.src.main.menu
 
 import android.os.Bundle
 import android.view.LayoutInflater
@@ -7,9 +7,9 @@
 import android.widget.TextView
 import androidx.recyclerview.widget.RecyclerView
 import com.bumptech.glide.Glide
-import com.example.binding.R
-import com.example.binding.src.main.menu.models.StoresResult
-import com.example.binding.src.main.menu.store_detail.StoreDetailFragment
+import com.makeus6.binding.R
+import com.makeus6.binding.src.main.menu.models.StoresResult
+import com.makeus6.binding.src.main.menu.store_detail.StoreDetailFragment
 import com.makeramen.roundedimageview.RoundedImageView
 import kotlinx.android.synthetic.main.item_menu.view.*
 
Index: app/src/main/java/com/example/binding/src/main/menu/MenuFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.binding.R\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.databinding.FragmentMenuBinding\r\nimport com.example.binding.src.main.menu.btm_sheet.BottomSheetLayout\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\n\r\nclass MenuFragment: BaseFragment<FragmentMenuBinding>(\r\n    FragmentMenuBinding::bind,\r\n    R.layout.fragment_menu\r\n), MenuFragmentView{\r\n\r\n    private val sp = ApplicationClass.sSharedPreferences\r\n\r\n    private lateinit var storeList: ArrayList<StoresResult>\r\n    private lateinit var menuRecyclerAdapter: MenuRecyclerViewAdapter\r\n    private var bigPos = -1      // 큰 지역 리스트뷰 선택된  pos\r\n    private var smallPos = -1    // 작은 지역 리스트뷰 선택된  pos\r\n    private var selectedLoction: String? = null   // 선택된 지역\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // 이전에 선택했던 지역 pos 값, text 값\r\n        sp.let{\r\n            bigPos = it.getInt(\"bigPos\", -1)\r\n            smallPos = it.getInt(\"smallPos\", -1)\r\n            selectedLoction = it.getString(\"selectedLocation\", null)\r\n            if(selectedLoction != null){\r\n                binding.menuLocation.text = selectedLoction\r\n            }\r\n\r\n        }\r\n\r\n        menuRecyclerAdapter = MenuRecyclerViewAdapter(this)\r\n        binding.menuRecycler.adapter = menuRecyclerAdapter\r\n        binding.menuRecycler.layoutManager = LinearLayoutManager(activity\r\n            , LinearLayoutManager.VERTICAL, false\r\n        )\r\n\r\n        if(smallPos == -1){\r\n            // 임시로 1페이지 30개만 가져온다, 전체 서점\r\n            showLoadingDialog(context!!)\r\n            MenuService(this).tryGetAllStores(0, 30)\r\n        }else{\r\n            updateLocationStores(arrayListOf(selectedLoction!!))\r\n        }\r\n\r\n        // 지역 선택 버튼 클릭\r\n        binding.menuLocation.setOnClickListener(onClickLocation)\r\n\r\n        // binding.menuRecycler.addOnScrollListener(onRecyclerScroll)\r\n\r\n    }\r\n\r\n    /*private val onRecyclerScroll = object: RecyclerView.OnScrollListener(){\r\n        override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\r\n            super.onScrollStateChanged(recyclerView, newState)\r\n        }\r\n\r\n        override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n            super.onScrolled(recyclerView, dx, dy)\r\n        }\r\n    }*/\r\n\r\n    // 지역 선택 버튼 클릭 -> Bottom Sheet 보여준다\r\n    private val onClickLocation = View.OnClickListener {\r\n        val btmSheet = BottomSheetLayout(this)\r\n\r\n        // 지금 선택되어있는 지역 pos 값 전달\r\n        val posBundle = Bundle()\r\n        posBundle.putInt(\"bigPos\", bigPos)\r\n        posBundle.putInt(\"smallPos\", smallPos)\r\n        btmSheet.arguments = posBundle\r\n\r\n        val fragmentManager = childFragmentManager\r\n        btmSheet.show(fragmentManager, \"Location\")\r\n    }\r\n\r\n    override fun onGetAllStoresSuccess(response: GetStoresResponse) {\r\n        Log.d(\"로그\", \"onGetAllStoresSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n            // 조회에 성공하면 리사이클러뷰에 서점 데이터를 전달한다\r\n            1000 -> {\r\n                val result = response.result\r\n                Log.d(\"로그\", \"전체 서점 조회 성공 - result: $result\")\r\n\r\n                storeList = ArrayList()\r\n                storeList = result\r\n\r\n                // 서점 데이터 전달\r\n                menuRecyclerAdapter.updateList(storeList)\r\n            }\r\n\r\n            else -> {\r\n                Log.d(\"로그\", \"전체 서점 조회 실패 - message: ${response.message}\")\r\n\r\n                response.message?.let{showCustomToast(it)}\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onGetAllStoresFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetAllStoresFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n    override fun onGetLocationStoresSuccess(response: GetStoresResponse) {\r\n        Log.d(\"로그\", \"onGetLocationStoresSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n            // 조회에 성공하면 리사이클러뷰에 서점 데이터를 전달한다\r\n            1000 -> {\r\n                val result = response.result\r\n                Log.d(\"로그\", \"지역 서점 조회 성공 - result: $result\")\r\n\r\n                storeList = ArrayList()\r\n                storeList = result\r\n\r\n                // 서점 데이터 전달\r\n                menuRecyclerAdapter.updateList(storeList)\r\n\r\n            }\r\n\r\n            else -> {\r\n                Log.d(\"로그\", \"지역 서점 조회 실패 - message: ${response.message}\")\r\n\r\n                response.message?.let{showCustomToast(it)}\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onGetLocationStoresFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetLocationStoresFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n    // 바텀시트에서 선택 -> 지역 서점 가져오기\r\n    override fun updateLocationStores(LocationList: ArrayList<String>) {\r\n        showLoadingDialog(context!!)\r\n        MenuService(this).tryGetLocationStores(0, 15, LocationList)\r\n    }\r\n\r\n    // 바텀시트에서 선택 -> 전체 서점 가져오기\r\n    override fun getAllStores() {\r\n        showLoadingDialog(context!!)\r\n        MenuService(this).tryGetAllStores(0, 15)\r\n    }\r\n\r\n    // 선택한 지역으로 TEXT 값 변경\r\n    override fun updateLocationTxt(location: String) {\r\n        binding.menuLocation.text = location\r\n        selectedLoction = location\r\n        sp.edit().putString(\"selectedLocation\", selectedLoction).apply()\r\n    }\r\n\r\n    // 선택한 BottomSheetLayout의 리스트뷰의 pos 값으로 업데이트\r\n    override fun updateLocationPos(bigPosition: Int, smallPosition: Int) {\r\n        bigPos = bigPosition\r\n        smallPos = smallPosition\r\n        sp.edit().let{\r\n            it.putInt(\"bigPos\", bigPos)\r\n            it.putInt(\"smallPos\", smallPos)\r\n        }.apply()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/MenuFragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/MenuFragment.kt	(date 1616059360907)
@@ -1,17 +1,16 @@
-package com.example.binding.src.main.menu
+package com.makeus6.binding.src.main.menu
 
 import android.os.Bundle
 import android.util.Log
 import android.view.View
 import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
-import com.example.binding.R
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseFragment
-import com.example.binding.databinding.FragmentMenuBinding
-import com.example.binding.src.main.menu.btm_sheet.BottomSheetLayout
-import com.example.binding.src.main.menu.models.GetStoresResponse
-import com.example.binding.src.main.menu.models.StoresResult
+import com.makeus6.binding.R
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.databinding.FragmentMenuBinding
+import com.makeus6.binding.src.main.menu.btm_sheet.BottomSheetLayout
+import com.makeus6.binding.src.main.menu.models.GetStoresResponse
+import com.makeus6.binding.src.main.menu.models.StoresResult
 
 class MenuFragment: BaseFragment<FragmentMenuBinding>(
     FragmentMenuBinding::bind,
Index: app/src/main/java/com/example/binding/src/main/menu/MenuService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.src.login.LoginActivityView\r\nimport com.example.binding.src.login.LoginRetrofitInterface\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass MenuService(val view: MenuFragmentView) {\r\n\r\n    // 전체서점 API 실행\r\n    fun tryGetAllStores(page: Int, limit: Int){\r\n\r\n        val menuRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            MenuRetrofitInterface::class.java)\r\n\r\n        menuRetrofitInterface.getAllStores(page,limit)\r\n            .enqueue(object : Callback<GetStoresResponse> {\r\n\r\n                override fun onResponse(call: Call<GetStoresResponse>,\r\n                                        response: Response<GetStoresResponse>\r\n                ) {\r\n                    view.onGetAllStoresSuccess(response.body() as GetStoresResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<GetStoresResponse>, t: Throwable) {\r\n                    view.onGetAllStoresFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    // 특정 지역 서점들 API\r\n    fun tryGetLocationStores(page: Int, limit: Int, locationFilter: ArrayList<String>){\r\n\r\n        val menuRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            MenuRetrofitInterface::class.java)\r\n\r\n        menuRetrofitInterface.getLocationStores(page, limit, locationFilter)\r\n            .enqueue(object : Callback<GetStoresResponse> {\r\n\r\n                override fun onResponse(call: Call<GetStoresResponse>,\r\n                                        response: Response<GetStoresResponse>\r\n                ) {\r\n                    view.onGetLocationStoresSuccess(response.body() as GetStoresResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<GetStoresResponse>, t: Throwable) {\r\n                    view.onGetLocationStoresFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/MenuService.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/MenuService.kt	(date 1616059360730)
@@ -1,11 +1,7 @@
-package com.example.binding.src.main.menu
+package com.makeus6.binding.src.main.menu
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.src.login.LoginActivityView
-import com.example.binding.src.login.LoginRetrofitInterface
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
-import com.example.binding.src.main.menu.models.GetStoresResponse
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.src.main.menu.models.GetStoresResponse
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/main/home/models/GetNewestResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class GetNewestResponse (\r\n    @SerializedName(\"result\") val result: ArrayList<NewestResult>\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/models/GetNewestResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/models/GetNewestResponse.kt	(date 1616059348543)
@@ -1,6 +1,6 @@
-package com.example.binding.src.main.home.models
+package com.makeus6.binding.src.main.home.models
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class GetNewestResponse (
Index: app/src/main/java/com/example/binding/src/main/menu/MenuFragmentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu\r\n\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\n\r\ninterface MenuFragmentView {\r\n\r\n    // 전체 서점 API 콜백 함수\r\n    fun onGetAllStoresSuccess(response: GetStoresResponse)\r\n\r\n    fun onGetAllStoresFailure(message: String)\r\n\r\n    // 지역 서점 API 콜백 함수\r\n    fun onGetLocationStoresSuccess(response: GetStoresResponse)\r\n\r\n    fun onGetLocationStoresFailure(message: String)\r\n\r\n    // 바텀시트에서 지역 선택을 완료했을 때 실행할 콜백함수\r\n    fun updateLocationStores(LocationList: ArrayList<String>)\r\n\r\n    // 전체 지역 선택\r\n    fun getAllStores()\r\n\r\n    // 지역 이름 변경\r\n    fun updateLocationTxt(location: String)\r\n\r\n    // 지역 pos 변경\r\n    fun updateLocationPos(bigPosition: Int, smallPosition: Int)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/MenuFragmentView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/MenuFragmentView.kt	(date 1616059347269)
@@ -1,6 +1,6 @@
-package com.example.binding.src.main.menu
+package com.makeus6.binding.src.main.menu
 
-import com.example.binding.src.main.menu.models.GetStoresResponse
+import com.makeus6.binding.src.main.menu.models.GetStoresResponse
 
 interface MenuFragmentView {
 
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@color/colorPrimary\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <RelativeLayout\r\n        android:id=\"@+id/home_top_bar\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"49dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginRight=\"20dp\">\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/home_sort_btn\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_centerVertical=\"true\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/home_sort_txt\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:fontFamily=\"@font/notosanskrbold\"\r\n                android:text=\"최신글\"\r\n                android:textColor=\"@color/colorPrimaryDark\"\r\n                android:textSize=\"15dp\" />\r\n\r\n            <ImageView\r\n                android:id=\"@+id/home_sort_down\"\r\n                android:layout_width=\"25dp\"\r\n                android:layout_height=\"25dp\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:layout_marginLeft=\"5dp\"\r\n                android:layout_toRightOf=\"@id/home_sort_txt\"\r\n                android:src=\"@drawable/down\" />\r\n        </RelativeLayout>\r\n\r\n        <ImageView\r\n            android:id=\"@+id/home_search\"\r\n            android:layout_width=\"25dp\"\r\n            android:layout_height=\"25dp\"\r\n            android:layout_alignParentRight=\"true\"\r\n            android:layout_centerVertical=\"true\"\r\n            android:src=\"@drawable/search\" />\r\n    </RelativeLayout>\r\n\r\n    <View\r\n        android:id=\"@+id/home_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"1dp\"\r\n        android:layout_below=\"@id/home_top_bar\"\r\n        android:background=\"#dadada\" />\r\n\r\n    <!--정렬 탭입니다. down 화살표 누르면 보여지고, 하나 선택하면 사라지도록 visibility 설정해주세요. -->\r\n    <LinearLayout\r\n        android:visibility=\"gone\"\r\n        android:id=\"@+id/home_sort_tab\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"108dp\"\r\n        android:layout_below=\"@id/home_view\"\r\n        android:background=\"@color/colorPrimary\"\r\n        android:orientation=\"vertical\"\r\n        android:elevation=\"6dp\"\r\n        android:weightSum=\"2\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/home_sort_newest\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_weight=\"1\"\r\n            android:fontFamily=\"@font/notosanskrbold\"\r\n            android:gravity=\"center\"\r\n            android:text=\"최신글\"\r\n            android:textColor=\"@color/colorPrimaryDark\"\r\n            android:textSize=\"15dp\" />\r\n\r\n        <View\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1dp\"\r\n            android:layout_marginLeft=\"11dp\"\r\n            android:layout_marginRight=\"11dp\"\r\n            android:background=\"#dadada\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/home_sort_popular\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_weight=\"1\"\r\n            android:fontFamily=\"@font/notosanskrbold\"\r\n            android:gravity=\"center\"\r\n            android:text=\"인기글\"\r\n            android:textColor=\"@color/colorPrimaryDark\"\r\n            android:textSize=\"15dp\" />\r\n\r\n        <View\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1dp\"\r\n            android:background=\"#dadada\" />\r\n    </LinearLayout>\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/home_recycler\"\r\n        android:layout_below=\"@id/home_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        tools:listitem=\"@layout/item_book\"/>\r\n\r\n    <ImageView\r\n        android:layout_width=\"60dp\"\r\n        android:layout_height=\"60dp\"\r\n        android:src=\"@drawable/red_btn\"\r\n        android:layout_alignParentRight=\"true\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginBottom=\"20dp\"/>\r\n\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_home.xml	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/res/layout/fragment_home.xml	(date 1616153393756)
@@ -2,15 +2,19 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:background="@color/colorPrimary"
     xmlns:tools="http://schemas.android.com/tools">
 
-    <RelativeLayout
-        android:id="@+id/home_top_bar"
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/toolbar"
         android:layout_width="match_parent"
-        android:layout_height="49dp"
-        android:layout_marginLeft="20dp"
-        android:layout_marginRight="20dp">
+        android:layout_height="wrap_content"
+        android:background="?attr/colorPrimary"
+        android:minHeight="?attr/actionBarSize"
+        android:theme="?attr/actionBarTheme"
+        tools:menu="@menu/menu_home_toolbar"
+        app:collapseIcon="@drawable/icon_left_25">
 
         <RelativeLayout
             android:id="@+id/home_sort_btn"
@@ -37,21 +41,13 @@
                 android:layout_toRightOf="@id/home_sort_txt"
                 android:src="@drawable/down" />
         </RelativeLayout>
-
-        <ImageView
-            android:id="@+id/home_search"
-            android:layout_width="25dp"
-            android:layout_height="25dp"
-            android:layout_alignParentRight="true"
-            android:layout_centerVertical="true"
-            android:src="@drawable/search" />
-    </RelativeLayout>
+    </androidx.appcompat.widget.Toolbar>
 
     <View
         android:id="@+id/home_view"
         android:layout_width="match_parent"
         android:layout_height="1dp"
-        android:layout_below="@id/home_top_bar"
+        android:layout_below="@id/toolbar"
         android:background="#dadada" />
 
     <!--정렬 탭입니다. down 화살표 누르면 보여지고, 하나 선택하면 사라지도록 visibility 설정해주세요. -->
@@ -109,13 +105,16 @@
         tools:listitem="@layout/item_book"/>
 
     <ImageView
+        android:id="@+id/home_create_room"
         android:layout_width="60dp"
         android:layout_height="60dp"
         android:src="@drawable/red_btn"
         android:layout_alignParentRight="true"
         android:layout_alignParentBottom="true"
         android:layout_marginRight="20dp"
-        android:layout_marginBottom="20dp"/>
+        android:layout_marginBottom="20dp"
+        android:clickable="true"
+        android:focusable="true"/>
 
 
 </RelativeLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/binding/src/main/home/models/NewestResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home.models\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\nopen class NewestResult (\r\n    @SerializedName(\"bookIdx\") val bookIdx: Int = 0,\r\n    @SerializedName(\"bookImgUrl\") val bookImgUrl: String? = null,\r\n    @SerializedName(\"bookName\") val bookName: String? = null,\r\n    @SerializedName(\"authorName\") val authorName: String? = null,\r\n    @SerializedName(\"contentsCount\") val contentsCount: String? = null\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/models/NewestResult.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/models/NewestResult.kt	(date 1616059348833)
@@ -1,4 +1,4 @@
-package com.example.binding.src.main.home.models
+package com.makeus6.binding.src.main.home.models
 
 import com.google.gson.annotations.SerializedName
 
Index: app/src/main/java/com/example/binding/src/main/menu/models/GetStoresResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class GetStoresResponse (\r\n    @SerializedName(\"result\") val result: ArrayList<StoresResult>\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/models/GetStoresResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/models/GetStoresResponse.kt	(date 1616059347428)
@@ -1,6 +1,6 @@
-package com.example.binding.src.main.menu.models
+package com.makeus6.binding.src.main.menu.models
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class GetStoresResponse (
Index: app/src/main/java/com/example/binding/src/main/home/models/GetPopularResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class GetPopularResponse (\r\n    @SerializedName(\"result\") val result: ArrayList<PopularResult>\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/models/GetPopularResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/models/GetPopularResponse.kt	(date 1616059348415)
@@ -1,6 +1,6 @@
-package com.example.binding.src.main.home.models
+package com.makeus6.binding.src.main.home.models
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class GetPopularResponse (
Index: app/src/main/java/com/example/binding/src/main/menu/models/StoresResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class StoresResult (\r\n    @SerializedName(\"bookstoreIdx\") val bookstoreIdx: Int,\r\n    @SerializedName(\"storeName\") val storeName: String,\r\n    @SerializedName(\"location\") val location: String,\r\n    @SerializedName(\"storeImgUrl\") val storeImgUrl: String\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/models/StoresResult.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/models/StoresResult.kt	(date 1616059348355)
@@ -1,6 +1,6 @@
-package com.example.binding.src.main.menu.models
+package com.makeus6.binding.src.main.menu.models
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class StoresResult (
Index: app/src/main/java/com/example/binding/src/main/menu/btm_sheet/BottomSheetLayout.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.btm_sheet\r\n\r\nimport android.app.Dialog\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport com.example.binding.R\r\nimport com.example.binding.databinding.LayoutBottomSheetBinding\r\nimport com.example.binding.src.main.menu.MenuFragmentView\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\r\nimport java.util.*\r\n\r\nclass BottomSheetLayout(private val menuFragmentView: MenuFragmentView): BottomSheetDialogFragment() {\r\n    private var _binding: LayoutBottomSheetBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private lateinit var bigLocationList: ArrayList<String> // 첫번째 지역(시/도) 리스트뷰 데이터\r\n    private lateinit var bigAdapter: ArrayAdapter<String>   // 첫번째 지역 리스트뷰 어댑터\r\n    lateinit var smallLocationList: ArrayList<String> // 두번째 지역(구) 리스트뷰 데이터\r\n    lateinit var smallAdapter: ArrayAdapter<String>   // 두번째 지역 리스트뷰 어댑터\r\n    private var selectedLocation: String? = null             // 최종 선택된 지역\r\n    lateinit var selectedLocations: ArrayList<String> // 여러 지역 선택할 때 사용 가능\r\n    private var bigPos = -1     // 큰 지역 pos\r\n    private var smallPos = -1    // 작은 지역 pos\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val btmSheetDialog =  super.onCreateDialog(savedInstanceState) as BottomSheetDialog\r\n\r\n        // 커스텀 다이얼로그 뷰 생성,적용\r\n        val view = View.inflate(context, R.layout.layout_bottom_sheet, null)\r\n        btmSheetDialog.setContentView(view)\r\n\r\n        // 바텀시트 크기 설정\r\n        val btmSheetContainer = btmSheetDialog.findViewById<View>(R.id.design_bottom_sheet)\r\n        val params = btmSheetContainer?.layoutParams\r\n        val screenHeight = activity!!.resources.displayMetrics.heightPixels\r\n        params?.height = (screenHeight * 0.66).toInt()\r\n        // params?.height = BottomSheetBehavior.PEEK_HEIGHT_AUTO\r\n        btmSheetContainer?.layoutParams = params\r\n\r\n        return btmSheetDialog\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        // default 선택 지역 위한 pos 값들\r\n        arguments?.let {\r\n            bigPos = it.getInt(\"bigPos\")\r\n            smallPos = it.getInt(\"smallPos\")\r\n        }\r\n\r\n        // 첫번째 지역 선택 리스트뷰 설정\r\n        bigLocationList = arrayListOf(\"서울\", \"경기도\", \"인천\")\r\n        bigAdapter = ArrayAdapter(context!!, R.layout.item_big_location,bigLocationList)\r\n        binding.bottomSheetBigList.adapter = bigAdapter\r\n        binding.bottomSheetBigList.onItemClickListener = onBigClick\r\n        if(bigPos != -1){\r\n            binding.bottomSheetBigList.setItemChecked(bigPos, true)     // default 값\r\n        }\r\n\r\n\r\n        // 두번째 지역 선택 리스트뷰 설정\r\n        smallLocationList = arrayListOf()\r\n        smallAdapter = ArrayAdapter(context!!, R.layout.item_small_location, smallLocationList)\r\n        binding.bottomSheetSmallList.adapter = smallAdapter\r\n        // 이전에 선택했던 게 있으면 그 상태로 돌아가고, 없으면 서울을 보여준다\r\n        if(bigPos != -1){\r\n            updateSmallListView(bigPos)\r\n        } else{\r\n            smallLocationList.addAll(resources.getStringArray(R.array.Seoul))\r\n        }\r\n        binding.bottomSheetSmallList.onItemClickListener = onSmallClick\r\n        if(smallPos != -1){\r\n            binding.bottomSheetSmallList.setItemChecked(smallPos, true)\r\n        }\r\n\r\n\r\n        selectedLocations = arrayListOf(\"강동구\") // 여러 지역 선택할 때 사용 가능\r\n        // 선택완료 버튼\r\n        binding.bottomSheetButton.setOnClickListener(onClickSelect)\r\n\r\n        // x버튼 클릭\r\n        binding.bottomSheetCancel.setOnClickListener {\r\n            this.dismiss()\r\n        }\r\n    }\r\n\r\n    private val onClickSelect = View.OnClickListener {\r\n        // val smallListView = binding.bottomSheetSmallList\r\n\r\n        /*// 각 리스트 아이템이 선택되었는지, 반복문을 사용하여 확인 가능\r\n        val checkedItems: SparseBooleanArray = smallListView.checkedItemPositions\r\n        for(i in 0 until smallListView.count){\r\n            if(checkedItems.get(i)){\r\n                selectedLocations.add(smallLocationList[i])\r\n            }\r\n        }*/\r\n\r\n        // Log.d(\"로그\", \"onClickSelect() called, selectedLocations: $selectedLocations\")\r\n\r\n        // menuFragmentView.changeStores(selectedLocations)\r\n\r\n        // 지역을 선택하고 버튼을 누르면 동작\r\n        if(selectedLocation != null){\r\n            selectedLocations[0] = selectedLocation!!\r\n            menuFragmentView.let{\r\n                it.updateLocationStores(selectedLocations)\r\n                it.updateLocationTxt(selectedLocations[0])\r\n                it.updateLocationPos(bigPos, smallPos)\r\n            }\r\n        }else{\r\n            // menuFragmentView.st\r\n        }\r\n        this.dismiss()\r\n    }\r\n    private val onBigClick = AdapterView.OnItemClickListener { parent, view, position, id ->\r\n        val location = (view as TextView).text.toString()\r\n        Log.d(\"로그\", \"location1: $location\")\r\n\r\n        if(view.isActivated){\r\n            bigPos = position\r\n        }else{\r\n            bigPos = -1\r\n        }\r\n        // 선택한 지역에 맞게 2번째 리스트뷰 업데이트\r\n        updateSmallListView(position)\r\n    }\r\n\r\n    private fun updateSmallListView(bigPos: Int){\r\n        when(bigPos){\r\n            0 -> smallLocationList.let{\r\n                it.clear()\r\n                it.addAll(resources.getStringArray(R.array.Seoul))\r\n            }\r\n            1 ->\r\n                smallLocationList.let{\r\n                    it.clear()\r\n                    it.addAll(resources.getStringArray(R.array.Gyeonggi))\r\n                }\r\n            2 -> smallLocationList.let{\r\n                it.clear()\r\n                it.addAll(resources.getStringArray(R.array.Incheon))\r\n            }\r\n        }\r\n        smallAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    private val onSmallClick = AdapterView.OnItemClickListener { parent, view, position, id ->\r\n        val location = (view as TextView).text.toString()\r\n        Log.d(\"로그\", \"location2: $location\")\r\n\r\n       if(view.isActivated) {\r\n           selectedLocation = location\r\n           smallPos = position\r\n        }else{\r\n           selectedLocation = null\r\n           smallPos = -1\r\n        }\r\n    }\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = LayoutBottomSheetBinding.inflate(inflater, container, false)\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    fun showCustomToast(message: String) {\r\n        Toast.makeText(activity, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/btm_sheet/BottomSheetLayout.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/btm_sheet/BottomSheetLayout.kt	(date 1616059348718)
@@ -1,4 +1,4 @@
-package com.example.binding.src.main.menu.btm_sheet
+package com.makeus6.binding.src.main.menu.btm_sheet
 
 import android.app.Dialog
 import android.os.Bundle
@@ -7,9 +7,9 @@
 import android.view.View
 import android.view.ViewGroup
 import android.widget.*
-import com.example.binding.R
-import com.example.binding.databinding.LayoutBottomSheetBinding
-import com.example.binding.src.main.menu.MenuFragmentView
+import com.makeus6.binding.R
+import com.makeus6.binding.databinding.LayoutBottomSheetBinding
+import com.makeus6.binding.src.main.menu.MenuFragmentView
 import com.google.android.material.bottomsheet.BottomSheetDialog
 import com.google.android.material.bottomsheet.BottomSheetDialogFragment
 import java.util.*
Index: app/src/main/java/com/example/binding/src/main/home/models/PopularResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.home.models\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class PopularResult (\r\n    @SerializedName(\"viewCount\") val images: Int\r\n): NewestResult()
===================================================================
--- app/src/main/java/com/example/binding/src/main/home/models/PopularResult.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/home/models/PopularResult.kt	(date 1616059345633)
@@ -1,7 +1,7 @@
-package com.example.binding.src.main.home.models
+package com.makeus6.binding.src.main.home.models
 
 import com.google.gson.annotations.SerializedName
 
 data class PopularResult (
-    @SerializedName("viewCount") val images: Int
+    @SerializedName("viewCount") val viewCount: Int
 ): NewestResult()
\ No newline at end of file
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse\r\nimport retrofit2.Call\r\nimport retrofit2.http.*\r\n\r\ninterface StoreDetailRetrofitInterface {\r\n\r\n    // 클릭한 서점 상세조회 api\r\n    @GET(\"/bookstores/{bookstoreIdx}\")\r\n    fun getBookStore(@Path(\"bookstoreIdx\") bookstoreIdx: Int): Call<GetBookStoreResponse>\r\n\r\n    // 북마크 수정 api\r\n    @PATCH(\"/bookmark/bookstores/{bookstoreIdx}\")\r\n    fun patchBookmark(@Path(\"bookstoreIdx\") bookstoreIdx: Int): Call<BaseResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailRetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/StoreDetailRetrofitInterface.kt	(date 1616059348092)
@@ -1,7 +1,7 @@
-package com.example.binding.src.main.menu.store_detail
+package com.makeus6.binding.src.main.menu.store_detail
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.main.menu.store_detail.models.GetBookStoreResponse
 import retrofit2.Call
 import retrofit2.http.*
 
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailFragmentView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse\r\n\r\ninterface StoreDetailFragmentView {\r\n\r\n    // 서점 상세 조회 API 콜백 함수\r\n    fun onGetBookStoreSuccess(response: GetBookStoreResponse)\r\n\r\n    fun onGetBookStoreFailure(message: String)\r\n\r\n    // 북마크 수정 API 콜백 함수\r\n    fun onPatchBookmarkSuccess(response: BaseResponse)\r\n\r\n    fun onPatchBookmarkFailure(message: String)\r\n\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailFragmentView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/StoreDetailFragmentView.kt	(date 1616059344137)
@@ -1,7 +1,7 @@
-package com.example.binding.src.main.menu.store_detail
+package com.makeus6.binding.src.main.menu.store_detail
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.main.menu.store_detail.models.GetBookStoreResponse
 
 interface StoreDetailFragmentView {
 
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail\r\n\r\nimport android.content.ActivityNotFoundException\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.PorterDuff\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport com.bumptech.glide.Glide\r\nimport com.example.binding.R\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.databinding.FragmentStoreDetailBinding\r\nimport com.example.binding.src.main.menu.store_detail.models.BookStoreImages\r\nimport com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse\r\nimport com.example.binding.util.LoadingDialog\r\n\r\n\r\nclass StoreDetailFragment: Fragment(), StoreDetailFragmentView{\r\n    private var _binding: FragmentStoreDetailBinding? = null\r\n    private val binding get() = _binding!!\r\n    lateinit var mLoadingDialog: LoadingDialog\r\n\r\n    private val sp = ApplicationClass.sSharedPreferences\r\n    private var bookStoreIdx = 0    // 프래그먼트 이동할 때 받은, 클릭된 현 서점의 인덱스\r\n\r\n    private lateinit var imagesList: ArrayList<BookStoreImages> // 이미지들의 인덱스, URL이 담긴 리스트\r\n    private var isBookMarked = 0    // 1이면 마크, 0이면 노마크\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // 프래그먼트용 테마 적용\r\n        val contextThemeWrapper = ContextThemeWrapper(activity, R.style.StoreDetailTheme)\r\n        val mInflater = inflater.cloneInContext(contextThemeWrapper)\r\n        _binding = FragmentStoreDetailBinding.inflate(mInflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        bookStoreIdx = arguments?.getInt(\"bookStoreIdx\", 0)!!\r\n\r\n        imagesList = ArrayList()\r\n\r\n        showLoadingDialog(context!!)\r\n        StoreDetailService(this).tryGetBookStore(bookStoreIdx)\r\n\r\n        // 북마크 ON\r\n        binding.storeDetailBookmarkEmpty.setOnClickListener {\r\n            showLoadingDialog(context!!)\r\n\r\n            // 북마크 수정 API 호출\r\n            StoreDetailService(this).tryPatchBookmark(bookStoreIdx)\r\n        }\r\n\r\n        // 북마크 해제\r\n        binding.storeDetailBookmarkFilled.setOnClickListener {\r\n            showLoadingDialog(context!!)\r\n\r\n            // 북마크 수정 API 호출\r\n            StoreDetailService(this).tryPatchBookmark(bookStoreIdx)\r\n        }\r\n\r\n        binding.storeDetailWebContainer.setOnClickListener(onClickWebAddress)\r\n    }\r\n\r\n    // 서점 인스타 홈페이지 띄우기 - web으로 띄우기\r\n    private val onClickWebAddress = View.OnClickListener {\r\n\r\n        //특정 페이지만 띄울때 사용\r\n        val instagramPageID = String.format(\"${binding.storeDetailWebAddress.text}/\")\r\n        var instagramPostID = \"\" //게시글을 까지 보여주고싶다면 이변수를 활용\r\n        // 만약 특정페이지 url이 있다면 게시글 url값을 초기화\r\n        if (instagramPageID != \"\") instagramPostID = \"\"\r\n\r\n        // val uri: Uri = Uri.parse(\"http://instagram.com/_u/$instagramPostID$instagramPageID\")\r\n        val uri: Uri = Uri.parse(\"$instagramPostID$instagramPageID\")\r\n        val instagramIntent = Intent(Intent.ACTION_VIEW, uri)\r\n\r\n        // instagramIntent.setPackage(\"com.instagram.android\")\r\n\r\n        try {\r\n            startActivity(instagramIntent)\r\n        } catch (e: ActivityNotFoundException) {\r\n            startActivity(instagramIntent)\r\n        }\r\n    }\r\n\r\n    override fun onGetBookStoreSuccess(response: GetBookStoreResponse) {\r\n        Log.d(\"로그\", \"onGetBookStoreSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n            1000 -> {\r\n                Log.d(\r\n                    \"로그\", \"서점 상세 조회 성공, code: ${response.code} , \" +\r\n                            \"message: ${response.message}\"\r\n                )\r\n\r\n                val result = response.result\r\n\r\n                val bookStoreInfo = result.bookStoreInfo[0]\r\n                imagesList = result.images\r\n\r\n                // 첫 사진을 대표사진으로 설정\r\n                if(imagesList.size > 0){\r\n                    Glide.with(this)\r\n                        .load(imagesList[0].imageUrl)\r\n                        .placeholder(R.drawable.icon_app)\r\n                        .error(R.drawable.icon_app)\r\n                        .into(binding.storeDetailCover)\r\n                }\r\n\r\n                // 텍스트와 겹치는 사진을 약간 어둡게 처리\r\n                binding.storeDetailCover.setColorFilter(\r\n                    Color.parseColor(\"#BDBDBD\"),\r\n                    PorterDuff.Mode.MULTIPLY\r\n                )\r\n\r\n                // 이미지 제외한 모든 정보 입력\r\n                bookStoreInfo.let {\r\n                    binding.storeDetailStoreName.text = it.storeName\r\n                    isBookMarked = it.isBookMark\r\n                    if (isBookMarked == 1) {\r\n                        binding.storeDetailBookmarkFilled.visibility = View.VISIBLE\r\n                        binding.storeDetailBookmarkEmpty.visibility = View.INVISIBLE\r\n                    } else {\r\n                        binding.storeDetailBookmarkFilled.visibility = View.INVISIBLE\r\n                        binding.storeDetailBookmarkEmpty.visibility = View.VISIBLE\r\n                    }\r\n                    binding.storeDetailLocationTxt.text = it.location\r\n                    binding.storeDetailWebAddress.text = it.siteAddress\r\n                    binding.storeDetailPhoneTxt.text = it.phoneNumber\r\n                    binding.storeDetailInfo.text = it.storeInfo\r\n                }\r\n            }\r\n            else -> Log.d(\r\n                \"로그\", \"서점 상세 조회 실패, code: ${response.code} , \" +\r\n                        \"message: ${response.message}\"\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    // 북마크 수정 API 콜백\r\n\r\n    override fun onGetBookStoreFailure(message: String) {\r\n        Log.d(\"로그\", \"onGetBookStoreFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n\r\n    override fun onPatchBookmarkSuccess(response: BaseResponse) {\r\n        Log.d(\"로그\", \"onPatchBookmarkSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n            in 1000..1001 -> {\r\n                isBookMarked = 1\r\n                binding.storeDetailBookmarkFilled.visibility = View.VISIBLE\r\n            }\r\n            1002 -> {\r\n                isBookMarked = 0\r\n                binding.storeDetailBookmarkFilled.visibility = View.GONE\r\n            }\r\n            else -> Log.d(\"로그\", \"북마크 수정 실패, message: ${response.message}\")\r\n        }\r\n    }\r\n\r\n    override fun onPatchBookmarkFailure(message: String) {\r\n        Log.d(\"로그\", \"onPatchBookmarkFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    private fun showCustomToast(message: String) {\r\n        Toast.makeText(activity, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    private fun showLoadingDialog(context: Context) {\r\n        mLoadingDialog = LoadingDialog(context)\r\n        mLoadingDialog.show()\r\n    }\r\n\r\n    private fun dismissLoadingDialog() {\r\n        if (mLoadingDialog.isShowing) {\r\n            mLoadingDialog.dismiss()\r\n        }\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailFragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/StoreDetailFragment.kt	(date 1616059348609)
@@ -1,4 +1,4 @@
-package com.example.binding.src.main.menu.store_detail
+package com.makeus6.binding.src.main.menu.store_detail
 
 import android.content.ActivityNotFoundException
 import android.content.Context
@@ -12,13 +12,13 @@
 import android.widget.Toast
 import androidx.fragment.app.Fragment
 import com.bumptech.glide.Glide
-import com.example.binding.R
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
-import com.example.binding.databinding.FragmentStoreDetailBinding
-import com.example.binding.src.main.menu.store_detail.models.BookStoreImages
-import com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse
-import com.example.binding.util.LoadingDialog
+import com.makeus6.binding.R
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.databinding.FragmentStoreDetailBinding
+import com.makeus6.binding.src.main.menu.store_detail.models.BookStoreImages
+import com.makeus6.binding.src.main.menu.store_detail.models.GetBookStoreResponse
+import com.makeus6.binding.util.LoadingDialog
 
 
 class StoreDetailFragment: Fragment(), StoreDetailFragmentView{
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.login.LoginActivityView\r\nimport com.example.binding.src.login.LoginRetrofitInterface\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport com.example.binding.src.main.menu.MenuFragmentView\r\nimport com.example.binding.src.main.menu.MenuRetrofitInterface\r\nimport com.example.binding.src.main.menu.models.GetStoresResponse\r\nimport com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass StoreDetailService(val view: StoreDetailFragmentView) {\r\n\r\n    // 서점 상세조회 API 실행 (네트워크 통신)\r\n    fun tryGetBookStore(bookstoreIdx: Int){\r\n\r\n        val storeDetailRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            StoreDetailRetrofitInterface::class.java)\r\n\r\n        storeDetailRetrofitInterface.getBookStore(bookstoreIdx)\r\n            .enqueue(object : Callback<GetBookStoreResponse> {\r\n\r\n                override fun onResponse(call: Call<GetBookStoreResponse>,\r\n                                        response: Response<GetBookStoreResponse>\r\n                ) {\r\n                    view.onGetBookStoreSuccess(response.body() as GetBookStoreResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<GetBookStoreResponse>, t: Throwable) {\r\n                    view.onGetBookStoreFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n\r\n    // 북마크 수정 API 실행 (네트워크 통신)\r\n    fun tryPatchBookmark(bookstoreIdx: Int){\r\n\r\n        val storeDetailRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            StoreDetailRetrofitInterface::class.java)\r\n\r\n        storeDetailRetrofitInterface.patchBookmark(bookstoreIdx)\r\n            .enqueue(object : Callback<BaseResponse> {\r\n\r\n                override fun onResponse(call: Call<BaseResponse>,\r\n                                        response: Response<BaseResponse>\r\n                ) {\r\n                    view.onPatchBookmarkSuccess(response.body() as BaseResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<BaseResponse>, t: Throwable) {\r\n                    view.onPatchBookmarkFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/StoreDetailService.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/StoreDetailService.kt	(date 1616059361225)
@@ -1,15 +1,8 @@
-package com.example.binding.src.main.menu.store_detail
+package com.makeus6.binding.src.main.menu.store_detail
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.login.LoginActivityView
-import com.example.binding.src.login.LoginRetrofitInterface
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
-import com.example.binding.src.main.menu.MenuFragmentView
-import com.example.binding.src.main.menu.MenuRetrofitInterface
-import com.example.binding.src.main.menu.models.GetStoresResponse
-import com.example.binding.src.main.menu.store_detail.models.GetBookStoreResponse
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.main.menu.store_detail.models.GetBookStoreResponse
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/main/my_page/MyPageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.my_page\r\n\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport com.example.binding.R\r\nimport com.example.binding.config.BaseFragment\r\nimport com.example.binding.databinding.FragmentMyPageBinding\r\n\r\nclass MyPageFragment: BaseFragment<FragmentMyPageBinding>(\r\n    FragmentMyPageBinding::bind,\r\n    R.layout.fragment_home\r\n){\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/main/my_page/MyPageFragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/my_page/MyPageFragment.kt	(date 1616059348813)
@@ -1,10 +1,10 @@
-package com.example.binding.src.main.my_page
+package com.makeus6.binding.src.main.my_page
 
 import android.os.Bundle
 import android.view.View
-import com.example.binding.R
-import com.example.binding.config.BaseFragment
-import com.example.binding.databinding.FragmentMyPageBinding
+import com.makeus6.binding.R
+import com.makeus6.binding.config.BaseFragment
+import com.makeus6.binding.databinding.FragmentMyPageBinding
 
 class MyPageFragment: BaseFragment<FragmentMyPageBinding>(
     FragmentMyPageBinding::bind,
Index: app/src/main/java/com/example/binding/src/login/LoginRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login\r\n\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.POST\r\n\r\ninterface LoginRetrofitInterface {\r\n\r\n    // 로그인 API\r\n    @POST(\"/sign-in\")\r\n    fun postLogin(@Body params: PostLoginBody): Call<LoginResponse>\r\n\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/login/LoginRetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/LoginRetrofitInterface.kt	(date 1616059344274)
@@ -1,7 +1,7 @@
-package com.example.binding.src.login
+package com.makeus6.binding.src.login
 
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
+import com.makeus6.binding.src.login.models.LoginResponse
+import com.makeus6.binding.src.login.models.PostLoginBody
 import retrofit2.Call
 import retrofit2.http.Body
 import retrofit2.http.POST
Index: app/src/main/java/com/example/binding/src/login/LoginService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass LoginService(val view: LoginActivityView) {\r\n\r\n    // 로그인 API 실행\r\n    fun tryPostLogin(email: String, pwd: String){\r\n\r\n        val loginBody = PostLoginBody(email, pwd)\r\n\r\n        val loginRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            LoginRetrofitInterface::class.java)\r\n\r\n        loginRetrofitInterface.postLogin(loginBody)\r\n            .enqueue(object : Callback<LoginResponse> {\r\n\r\n                override fun onResponse(call: Call<LoginResponse>,\r\n                                        response: Response<LoginResponse>\r\n                ) {\r\n                    view.onPostLoginSuccess(response.body() as LoginResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<LoginResponse>, t: Throwable) {\r\n                    view.onPostLoginFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/login/LoginService.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/LoginService.kt	(date 1616059348760)
@@ -1,8 +1,8 @@
-package com.example.binding.src.login
+package com.makeus6.binding.src.login
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.src.login.models.LoginResponse
+import com.makeus6.binding.src.login.models.PostLoginBody
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/login/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseActivity\r\nimport com.example.binding.databinding.ActivityLoginBinding\r\nimport com.example.binding.src.find_password.FindPasswordActivity\r\nimport com.example.binding.src.join.JoinActivity\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.main.MainActivity\r\n\r\nclass LoginActivity: BaseActivity<ActivityLoginBinding>(ActivityLoginBinding::inflate),\r\nLoginActivityView{\r\n\r\n    // 다른 화면으로 넘어가는 과정에서 binding이 풀려서 생기는 에러를 막기 위한 플래그\r\n    private var isHere = true\r\n\r\n    private val sp = ApplicationClass.sSharedPreferences\r\n\r\n    private lateinit var email: String\r\n    private lateinit var pwd: String\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        isHere = true\r\n\r\n        // 에러문구를 감춘다\r\n       binding.loginWrongInfo.visibility = View.INVISIBLE\r\n\r\n        // 회원가입 버튼 클릭\r\n        binding.loginJoin.setOnClickListener(onClickJoin)\r\n\r\n        // 비밀번호 찾기 버튼\r\n        binding.loginFindPw.setOnClickListener(onClickPassword)\r\n\r\n        // 로그인(다음) 버튼 클릭\r\n        binding.loginNext.setOnClickListener(onClickNext)\r\n\r\n        // 뒤로가기 버튼 클릭 -> 종료\r\n        binding.loginBack.setOnClickListener{\r\n            finish()\r\n        }\r\n\r\n        // 각 입력칸이 포커싱되면 밑줄이 굵어진다\r\n        binding.loginEmail.onFocusChangeListener = onFocusEmail\r\n        binding.loginPassword.onFocusChangeListener = onFocusPwd\r\n\r\n        // 첫번째 text칸 엔터키 -> 아래 editText로 이동\r\n        binding.loginEmail.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER){\r\n                binding.loginPassword.requestFocus()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 2번째 editText 엔터버튼 클릭 -> 다음 버튼 자동 눌림\r\n        binding.loginPassword.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN &&\r\n                (keyCode == KeyEvent.KEYCODE_ENDCALL || keyCode == KeyEvent.KEYCODE_ENTER)\r\n            ){\r\n                binding.loginNext.performClick()\r\n                true\r\n            }\r\n            false\r\n        }\r\n    }\r\n\r\n    private val onClickPassword = View.OnClickListener {\r\n        val passwordIntent = Intent(this, FindPasswordActivity::class.java)\r\n        isHere = false\r\n        startActivity(passwordIntent)\r\n        finish()\r\n    }\r\n\r\n    // 로그인(다음) 버튼 클릭\r\n    private val onClickNext = View.OnClickListener {\r\n        email = binding.loginEmail.text.toString()\r\n        pwd = binding.loginPassword.text.toString()\r\n\r\n        // 로그인 API 호출\r\n        LoginService(this).tryPostLogin(email, pwd)\r\n        // JoinDialog(this, true).show()\r\n    }\r\n\r\n    // 회원가입을 클릭하면 JoinActivity(회원가입 첫번째 프래그먼트)로 이동한다\r\n    private val onClickJoin = View.OnClickListener{\r\n        val joinIntent = Intent(this, JoinActivity::class.java)\r\n        isHere = false\r\n        startActivity(joinIntent)\r\n        finish()\r\n    }\r\n\r\n    // 이메일 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusEmail = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus ){\r\n            true -> {\r\n                binding.loginEmailLineBold.visibility = View.VISIBLE\r\n\r\n                // 키보드 올라온다\r\n                val manager: InputMethodManager =\r\n                    getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n                // manager.showSoftInput(v, InputMethodManager.SHOW_IMPLICIT)\r\n                manager.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY)\r\n\r\n            }\r\n            false ->\r\n                if(isHere){\r\n                    binding.loginEmailLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    // 비밀번호 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusPwd = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus){\r\n            true -> binding.loginPwLineBold.visibility = View.VISIBLE\r\n            false ->\r\n                if(isHere){\r\n                    binding.loginPwLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    // 로그인 API 통신 성공\r\n    override fun onPostLoginSuccess(response: LoginResponse) {\r\n        Log.d(\"로그\", \"onPostLoginSuccess() called, response: $response\")\r\n\r\n        when(response.code){\r\n\r\n            // 로그인 성공 -> jwt 저장하고 메인 화면으로 이동\r\n            1000 -> {\r\n                Log.d(\"로그\", \"로그인 성공, jwt: ${response.jwt}\")\r\n\r\n                // jwt 저장\r\n                sp.edit().putString(ApplicationClass.X_ACCESS_TOKEN, response.jwt).apply()\r\n\r\n                val mainIntent = Intent(this, MainActivity::class.java)\r\n                isHere = false\r\n                startActivity(mainIntent)\r\n                finish()\r\n            }\r\n\r\n            // 로그인 실패 -> 에러 문구\r\n            else -> {\r\n                Log.d(\"로그\",\"로그인 실패, msg: ${response.message}\")\r\n\r\n                binding.loginWrongInfo.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    // 로그인 API 통신 실패\r\n    override fun onPostLoginFailure(message: String) {\r\n        Log.d(\"로그\", \"onPostLoginFailure() called, message: $message\")\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/login/LoginActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/LoginActivity.kt	(date 1616059348080)
@@ -1,4 +1,4 @@
-package com.example.binding.src.login
+package com.makeus6.binding.src.login
 
 import android.content.Intent
 import android.os.Bundle
@@ -6,13 +6,13 @@
 import android.view.KeyEvent
 import android.view.View
 import android.view.inputmethod.InputMethodManager
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseActivity
-import com.example.binding.databinding.ActivityLoginBinding
-import com.example.binding.src.find_password.FindPasswordActivity
-import com.example.binding.src.join.JoinActivity
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.main.MainActivity
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseActivity
+import com.makeus6.binding.databinding.ActivityLoginBinding
+import com.makeus6.binding.src.find_password.FindPasswordActivity
+import com.makeus6.binding.src.join.JoinActivity
+import com.makeus6.binding.src.login.models.LoginResponse
+import com.makeus6.binding.src.main.MainActivity
 
 class LoginActivity: BaseActivity<ActivityLoginBinding>(ActivityLoginBinding::inflate),
 LoginActivityView{
Index: app/src/main/java/com/example/binding/src/login/LoginActivityView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login\r\n\r\nimport com.example.binding.src.login.models.LoginResponse\r\n\r\ninterface LoginActivityView {\r\n\r\n    // 로그인 API 콜백 함수\r\n    fun onPostLoginSuccess(response: LoginResponse)\r\n\r\n    fun onPostLoginFailure(message: String)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/login/LoginActivityView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/LoginActivityView.kt	(date 1616059348148)
@@ -1,6 +1,6 @@
-package com.example.binding.src.login
+package com.makeus6.binding.src.login
 
-import com.example.binding.src.login.models.LoginResponse
+import com.makeus6.binding.src.login.models.LoginResponse
 
 interface LoginActivityView {
 
Index: app/src/main/java/com/example/binding/src/login/models/PostLoginBody.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login.models\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class PostLoginBody (\r\n    @SerializedName(\"email\") val email: String,\r\n    @SerializedName(\"password\") val pwd: String\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/login/models/PostLoginBody.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/models/PostLoginBody.kt	(date 1616059346508)
@@ -1,4 +1,4 @@
-package com.example.binding.src.login.models
+package com.makeus6.binding.src.login.models
 
 import com.google.gson.annotations.SerializedName
 
Index: app/src/main/java/com/example/binding/src/login/models/LoginResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.login.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n// 로그인 API response 형식\r\ndata class LoginResponse (\r\n    @SerializedName(\"jwt\") val jwt: String\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/login/models/LoginResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/login/models/LoginResponse.kt	(date 1616059348803)
@@ -1,6 +1,6 @@
-package com.example.binding.src.login.models
+package com.makeus6.binding.src.login.models
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 // 로그인 API response 형식
Index: app/src/main/java/com/example/binding/src/splash/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.splash\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.View\r\nimport android.view.animation.AnimationUtils\r\nimport com.example.binding.R\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseActivity\r\nimport com.example.binding.databinding.ActivityAfterSplashBinding\r\nimport com.example.binding.src.login.LoginActivity\r\nimport com.example.binding.src.main.MainActivity\r\n\r\nclass SplashActivity : BaseActivity<ActivityAfterSplashBinding>(ActivityAfterSplashBinding::inflate) {\r\n\r\n    private val sp = ApplicationClass.sSharedPreferences\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val jwt = sp.getString(ApplicationClass.X_ACCESS_TOKEN, null)\r\n\r\n        // 임시 로그아웃 설정\r\n        // logOut()\r\n\r\n        // 처음에 next 버튼을 안보이게 한다\r\n        binding.splashNext.visibility = View.GONE\r\n\r\n        // 점점 안보이던 버튼을 선명하게 해주는 애니메이션\r\n        val animation = AnimationUtils.loadAnimation(applicationContext, R.anim.splash_alpha)\r\n\r\n        // {}초 후, 애니메이션 적용\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n\r\n            // 로그인이 안되어 있으면 넥스트 버튼을 띄운다\r\n            if(jwt == null){\r\n                binding.splashNext.startAnimation(animation)\r\n                binding.splashNext.visibility = View.VISIBLE\r\n            }\r\n            // 로그인 되어있으면 메인 화면으로 넘어간다\r\n            else{\r\n                val mainIntent = Intent(this, MainActivity::class.java)\r\n                startActivity(mainIntent)\r\n                overridePendingTransition(R.anim.none, R.anim.none_to_left)\r\n                finish()\r\n            }\r\n        }, 1500)\r\n\r\n        binding.splashNext.setOnClickListener(onNextClick)\r\n    }\r\n\r\n    // 다음 아이콘을 클릭하면 로그인 화면으로 이동한다.\r\n    private val onNextClick = View.OnClickListener {\r\n        val loginIntent = Intent(this, LoginActivity::class.java)\r\n        startActivity(loginIntent)\r\n        overridePendingTransition(R.anim.none, R.anim.none_to_left)\r\n        finish()\r\n    }\r\n\r\n    // 임시 로그아웃 함수\r\n    fun logOut(){\r\n        sp.edit().putString(ApplicationClass.X_ACCESS_TOKEN, null).apply()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/splash/SplashActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/splash/SplashActivity.kt	(date 1616059348792)
@@ -1,4 +1,4 @@
-package com.example.binding.src.splash
+package com.makeus6.binding.src.splash
 
 import android.content.Intent
 import android.os.Bundle
@@ -6,12 +6,12 @@
 import android.os.Looper
 import android.view.View
 import android.view.animation.AnimationUtils
-import com.example.binding.R
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseActivity
-import com.example.binding.databinding.ActivityAfterSplashBinding
-import com.example.binding.src.login.LoginActivity
-import com.example.binding.src.main.MainActivity
+import com.makeus6.binding.R
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseActivity
+import com.makeus6.binding.databinding.ActivityAfterSplashBinding
+import com.makeus6.binding.src.login.LoginActivity
+import com.makeus6.binding.src.main.MainActivity
 
 class SplashActivity : BaseActivity<ActivityAfterSplashBinding>(ActivityAfterSplashBinding::inflate) {
 
Index: app/src/main/java/com/example/binding/src/find_password/FindPasswordActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport com.example.binding.config.BaseActivity\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.databinding.ActivityFindPasswordBinding\r\nimport com.example.binding.src.join.done.JoinDoneDialog\r\nimport com.example.binding.src.login.LoginActivity\r\nimport java.util.regex.Pattern\r\n\r\n\r\nclass FindPasswordActivity:\r\n    BaseActivity<ActivityFindPasswordBinding>(ActivityFindPasswordBinding::inflate),\r\n    FindPasswordActivityView\r\n{\r\n\r\n    private var isHere = true\r\n\r\n    // 좀 더 디테일한 패턴 - 이메일 정규식\r\n    private val emailExp = \"(?:[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+)*|\\\"(?:\" +\r\n            \"[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\\" +\r\n            \"x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9]\" +\r\n            \"(?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}\" +\r\n            \"(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\" +\r\n            \"\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])\"\r\n    // 닉네임 - 올바른 자음모음만 가능\r\n    private val nicknameExp = \"^(?=.*[가-힣]).{2,8}$\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        isHere = true\r\n\r\n        // 각 입력칸이 포커싱되면 밑줄이 굵어진다\r\n        binding.findPwNickname.onFocusChangeListener = onFocusEmail\r\n        binding.findPwEmail.onFocusChangeListener = onFocusPwd\r\n\r\n        binding.findPwNext.setOnClickListener { onClickNext }\r\n\r\n        // 첫번째 text칸 엔터키 -> 아래 editText로 이동\r\n        binding.findPwNickname.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN && (keyCode == KeyEvent.KEYCODE_ENTER ||\r\n                    keyCode == KeyEvent.KEYCODE_ENDCALL)){\r\n                binding.findPwEmail.requestFocus()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 2번째 editText 엔터버튼 클릭 -> 다음 버튼 자동 눌림\r\n        binding.findPwEmail.setOnKeyListener { v, keyCode, event ->\r\n            if(event.action == KeyEvent.ACTION_DOWN &&\r\n                (keyCode == KeyEvent.KEYCODE_ENDCALL || keyCode == KeyEvent.KEYCODE_ENTER)\r\n            ){\r\n                binding.findPwNext.performClick()\r\n                true\r\n            }\r\n            false\r\n        }\r\n\r\n        // 뒤로가기 버튼\r\n        binding.findPwBack.setOnClickListener {\r\n            val loginIntent = Intent(this, LoginActivity::class.java)\r\n            isHere = false\r\n            startActivity(loginIntent)\r\n            finish()\r\n        }\r\n\r\n        binding.findPwNext.setOnClickListener(onClickNext)\r\n    }\r\n\r\n    // 이메일 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusEmail = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus ){\r\n            true -> binding.findPwNicknameLineBold.visibility = View.VISIBLE\r\n            false ->\r\n                if (isHere) {\r\n                    binding.findPwNicknameLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    // 비밀번호 입력 칸 포커스 -> 밑줄이 굵어진다\r\n    private val onFocusPwd = View.OnFocusChangeListener { v, hasFocus ->\r\n        when(hasFocus){\r\n            true -> {\r\n                binding.findPwEmailLineBold.visibility = View.VISIBLE\r\n                val manager: InputMethodManager =\r\n                    getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n                manager.showSoftInput(v, InputMethodManager.SHOW_IMPLICIT)\r\n            }\r\n            false ->\r\n                if (isHere) {\r\n                    binding.findPwEmailLineBold.visibility = View.INVISIBLE\r\n                }\r\n        }\r\n    }\r\n\r\n    private val onClickNext = View.OnClickListener {\r\n        val email = binding.findPwEmail.text.toString()\r\n        val nickname = binding.findPwNickname.text.toString()\r\n\r\n        // 닉네임 형식이 올바르지 않으면 에러 메시지를 보여준다\r\n        if(!isValidNickname(nickname)){\r\n            Log.d(\"로그\", \"nickname: $nickname , isValid: ${isValidNickname(nickname)}\")\r\n\r\n            binding.findPwWrongInfo.let{\r\n                it.text = String.format(\"유효하지 않은 닉네임 형식입니다.\")\r\n                it.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        // 이메일 형식이 올바르지 않을 때\r\n        else if(!isValidEmail(email)){\r\n            Log.d(\"로그\", \"nickname: $email , isValid: ${isValidEmail(email)}\")\r\n\r\n            binding.findPwWrongInfo.let{\r\n                it.text = String.format(\"유효하지 않은 이메일 형식입니다.\")\r\n                it.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        // 형식이 올바르면 비밀번호 찾기 API 호출 -> 임시 비밀번호 발급 요청\r\n        else{\r\n            Log.d(\"로그\", \"비밀번호 찾기 api 호출\")\r\n\r\n            showLoadingDialog(this)\r\n            FindPasswordService(this).tryPostFindPw(email, nickname)\r\n        }\r\n\r\n    }\r\n\r\n    override fun onPostFindPwSuccess(response: BaseResponse) {\r\n        Log.d(\"로그\", \"onPostFindPwSuccess() called, response: $response\")\r\n        dismissLoadingDialog()\r\n\r\n        when(response.code){\r\n\r\n            // 성공 -> 임시비밀번호 발급\r\n            1000 -> {\r\n                Log.d(\"로그\", \"회원가입 성공 - message: ${response.message}\")\r\n\r\n                isHere = false\r\n                // 임시비밀번호 보냄 완료 화면을 띄운다\r\n                val mTempPwDialog = TempPasswordDialog(this)\r\n                val fragmentManager = supportFragmentManager\r\n                mTempPwDialog.show(fragmentManager, \"temp_pw\")\r\n            }\r\n            3001 -> {\r\n                binding.findPwWrongInfo.let {\r\n                    it.text = String.format(\"등록되지 않은 이메일입니다.\")\r\n                    it.visibility = View.VISIBLE\r\n                }\r\n            }\r\n            3002 -> {\r\n                binding.findPwWrongInfo.let {\r\n                    it.text = String.format(\"닉네임이 일치하지 않습니다.\")\r\n                    it.visibility = View.VISIBLE\r\n                }\r\n            }\r\n            else -> {\r\n                binding.findPwWrongInfo.let{\r\n                    it.text = response.message\r\n                    it.visibility = View.VISIBLE\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onPostFindPwFailure(message: String) {\r\n        Log.d(\"로그\", \"onPostFindPwFailure() called, message: $message\")\r\n        dismissLoadingDialog()\r\n\r\n        showCustomToast(\"네트워크 확인 후 다시 시도해주세요.\")\r\n    }\r\n\r\n    // 정규식으로 한글 닉네임 형식 검사\r\n    private fun isValidNickname(nickname: String):Boolean {\r\n        var returnValue = false\r\n\r\n        try\r\n        {\r\n            val p = Pattern.compile(nicknameExp)\r\n            val m = p.matcher(nickname)\r\n\r\n            if (m.matches()) {\r\n                returnValue = true\r\n            }\r\n\r\n            return returnValue\r\n        }\r\n        catch (e: Exception) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    // 정규식으로 이메일 형식 검사하는 함수\r\n    fun isValidEmail(emailAddress: String):Boolean {\r\n        var returnValue = false\r\n\r\n        try\r\n        {\r\n            val p = Pattern.compile(emailExp)\r\n            val m = p.matcher(emailAddress)\r\n\r\n            if (m.matches() && emailAddress.length < 30) {\r\n                returnValue = true\r\n            }\r\n\r\n            return returnValue\r\n        }\r\n        catch (e: Exception) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    fun moveToLogin(){\r\n        val loginIntent = Intent(this, LoginActivity::class.java)\r\n        // 회원가입 성공 후 로그인 화면으로 돌아오는건지 확인\r\n        isHere = false\r\n        startActivity(loginIntent)\r\n        finish()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/FindPasswordActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/FindPasswordActivity.kt	(date 1616059361075)
@@ -1,17 +1,15 @@
-package com.example.binding.src.find_password
+package com.makeus6.binding.src.find_password
 
-import android.content.Context
 import android.content.Intent
 import android.os.Bundle
 import android.util.Log
 import android.view.KeyEvent
 import android.view.View
 import android.view.inputmethod.InputMethodManager
-import com.example.binding.config.BaseActivity
-import com.example.binding.config.BaseResponse
-import com.example.binding.databinding.ActivityFindPasswordBinding
-import com.example.binding.src.join.done.JoinDoneDialog
-import com.example.binding.src.login.LoginActivity
+import com.makeus6.binding.config.BaseActivity
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.databinding.ActivityFindPasswordBinding
+import com.makeus6.binding.src.login.LoginActivity
 import java.util.regex.Pattern
 
 
Index: app/src/main/java/com/example/binding/src/find_password/FindPasswordRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.find_password.models.PostFindPwBody\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport retrofit2.Call\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.POST\r\n\r\ninterface FindPasswordRetrofitInterface {\r\n\r\n    // 비밀번호 찾기 api\r\n    @POST(\"/find-password\")\r\n    fun postFindPw(@Body params: PostFindPwBody): Call<BaseResponse>\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/FindPasswordRetrofitInterface.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/FindPasswordRetrofitInterface.kt	(date 1616059361236)
@@ -1,9 +1,7 @@
-package com.example.binding.src.find_password
+package com.makeus6.binding.src.find_password
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.find_password.models.PostFindPwBody
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.find_password.models.PostFindPwBody
 import retrofit2.Call
 import retrofit2.http.Body
 import retrofit2.http.POST
Index: app/src/main/java/com/example/binding/src/find_password/FindPasswordActivityView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password\r\n\r\nimport com.example.binding.config.BaseResponse\r\n\r\ninterface FindPasswordActivityView {\r\n\r\n    // 로그인 API 콜백 함수\r\n    fun onPostFindPwSuccess(response: BaseResponse)\r\n\r\n    fun onPostFindPwFailure(message: String)\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/FindPasswordActivityView.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/FindPasswordActivityView.kt	(date 1616059344160)
@@ -1,6 +1,6 @@
-package com.example.binding.src.find_password
+package com.makeus6.binding.src.find_password
 
-import com.example.binding.config.BaseResponse
+import com.makeus6.binding.config.BaseResponse
 
 interface FindPasswordActivityView {
 
Index: app/src/main/java/com/example/binding/src/find_password/FindPasswordService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password\r\n\r\nimport com.example.binding.config.ApplicationClass\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.find_password.models.PostFindPwBody\r\nimport com.example.binding.src.login.LoginActivityView\r\nimport com.example.binding.src.login.LoginRetrofitInterface\r\nimport com.example.binding.src.login.models.LoginResponse\r\nimport com.example.binding.src.login.models.PostLoginBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass FindPasswordService(val view: FindPasswordActivityView) {\r\n\r\n    // 비밀번호 찾기 API\r\n    fun tryPostFindPw(email: String, nickname: String){\r\n\r\n        val findPwBody = PostFindPwBody(email, nickname)\r\n\r\n        val findPasswordRetrofitInterface = ApplicationClass.sRetrofit.create(\r\n            FindPasswordRetrofitInterface::class.java)\r\n\r\n        findPasswordRetrofitInterface.postFindPw(findPwBody)\r\n            .enqueue(object : Callback<BaseResponse> {\r\n\r\n                override fun onResponse(call: Call<BaseResponse>,\r\n                                        response: Response<BaseResponse>\r\n                ) {\r\n                    view.onPostFindPwSuccess(response.body() as BaseResponse)\r\n                }\r\n\r\n                override fun onFailure(call: Call<BaseResponse>, t: Throwable) {\r\n                    view.onPostFindPwFailure(t.message ?: \"통신 오류\")\r\n                }\r\n            })\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/FindPasswordService.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/FindPasswordService.kt	(date 1616059361090)
@@ -1,12 +1,8 @@
-package com.example.binding.src.find_password
+package com.makeus6.binding.src.find_password
 
-import com.example.binding.config.ApplicationClass
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.find_password.models.PostFindPwBody
-import com.example.binding.src.login.LoginActivityView
-import com.example.binding.src.login.LoginRetrofitInterface
-import com.example.binding.src.login.models.LoginResponse
-import com.example.binding.src.login.models.PostLoginBody
+import com.makeus6.binding.config.ApplicationClass
+import com.makeus6.binding.config.BaseResponse
+import com.makeus6.binding.src.find_password.models.PostFindPwBody
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
Index: app/src/main/java/com/example/binding/src/find_password/TempPasswordDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport androidx.fragment.app.DialogFragment\r\nimport com.example.binding.R\r\nimport com.example.binding.databinding.DialogJoinDoneBinding\r\nimport com.example.binding.src.join.JoinActivity\r\n\r\n\r\nclass TempPasswordDialog(context: Context) : DialogFragment() {\r\n    private var _binding: DialogJoinDoneBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = DialogJoinDoneBinding.inflate(inflater, container, false)\r\n\r\n        val dialog = dialog;\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog?.setCanceledOnTouchOutside(false);\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder: AlertDialog.Builder = AlertDialog.Builder(activity)\r\n        val view: View = activity!!.layoutInflater.inflate(R.layout.dialog_temp_password, null)\r\n        builder.setView(view)\r\n        val dialog = builder.create()\r\n\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog?.setCanceledOnTouchOutside(false)\r\n\r\n        // 로그인하러 가기 버튼\r\n        val btn = view.findViewById<Button>(R.id.dialog_temp_password_btn)\r\n        btn.setOnClickListener {\r\n            (activity!! as FindPasswordActivity).moveToLogin()\r\n        }\r\n\r\n        return dialog\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/TempPasswordDialog.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/TempPasswordDialog.kt	(date 1616059361105)
@@ -1,9 +1,8 @@
-package com.example.binding.src.find_password
+package com.makeus6.binding.src.find_password
 
 import android.app.AlertDialog
 import android.app.Dialog
 import android.content.Context
-import android.content.Intent
 import android.graphics.Color
 import android.graphics.drawable.ColorDrawable
 import android.os.Bundle
@@ -12,9 +11,8 @@
 import android.view.ViewGroup
 import android.widget.Button
 import androidx.fragment.app.DialogFragment
-import com.example.binding.R
-import com.example.binding.databinding.DialogJoinDoneBinding
-import com.example.binding.src.join.JoinActivity
+import com.makeus6.binding.R
+import com.makeus6.binding.databinding.DialogJoinDoneBinding
 
 
 class TempPasswordDialog(context: Context) : DialogFragment() {
Index: app/src/main/java/com/example/binding/src/find_password/models/PostFindPwBody.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.find_password.models\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n\r\ndata class PostFindPwBody(\r\n    @SerializedName(\"email\") val email: String,\r\n    @SerializedName(\"nickname\") val nickname: String)\r\n
===================================================================
--- app/src/main/java/com/example/binding/src/find_password/models/PostFindPwBody.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/find_password/models/PostFindPwBody.kt	(date 1616059344083)
@@ -1,4 +1,4 @@
-package com.example.binding.src.find_password.models
+package com.makeus6.binding.src.find_password.models
 
 import com.google.gson.annotations.SerializedName
 
Index: app/src/main/java/com/example/binding/util/LoadingDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.util\r\n\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.Window\r\nimport com.example.binding.databinding.DialogLoadingBinding\r\n\r\nclass LoadingDialog(context: Context) : Dialog(context) {\r\n    private lateinit var binding: DialogLoadingBinding\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        binding = DialogLoadingBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        setCanceledOnTouchOutside(false)\r\n        setCancelable(false)\r\n        window!!.setBackgroundDrawable(ColorDrawable())\r\n        window!!.setDimAmount(0.2f)\r\n    }\r\n\r\n    override fun show() {\r\n        if(!this.isShowing) super.show()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/util/LoadingDialog.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/util/LoadingDialog.kt	(date 1616059345551)
@@ -1,11 +1,11 @@
-package com.example.binding.util
+package com.makeus6.binding.util
 
 import android.app.Dialog
 import android.content.Context
 import android.graphics.drawable.ColorDrawable
 import android.os.Bundle
 import android.view.Window
-import com.example.binding.databinding.DialogLoadingBinding
+import com.makeus6.binding.databinding.DialogLoadingBinding
 
 class LoadingDialog(context: Context) : Dialog(context) {
     private lateinit var binding: DialogLoadingBinding
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.binding\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n\r\n    <application\r\n        android:name=\".config.ApplicationClass\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n\r\n        <!-- 스플래시 화면 -->\r\n        <activity android:name=\".src.splash.SplashActivity\">\r\n\r\n        </activity>\r\n\r\n        <activity android:name=\".src.main.MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <!-- 로그인 화면-->\r\n        <activity android:name=\".src.login.LoginActivity\"/>\r\n\r\n        <!-- 회원가입 화면-->\r\n        <activity android:name=\".src.join.JoinActivity\"/>\r\n\r\n        <!-- 비밀번호 찾기 화면-->\r\n        <activity android:name=\".src.find_password.FindPasswordActivity\"/>\r\n\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/AndroidManifest.xml	(date 1616061226006)
@@ -1,11 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.binding">
+    package="com.makeus6.binding">
 
     <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.CAMERA"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+
+
 
     <application
-        android:name=".config.ApplicationClass"
+        android:name="com.makeus6.binding.config.ApplicationClass"
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
@@ -14,11 +18,11 @@
         android:theme="@style/AppTheme">
 
         <!-- 스플래시 화면 -->
-        <activity android:name=".src.splash.SplashActivity">
+        <activity android:name="com.makeus6.binding.src.splash.SplashActivity">
 
         </activity>
 
-        <activity android:name=".src.main.MainActivity">
+        <activity android:name="com.makeus6.binding.src.main.MainActivity">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
@@ -26,13 +30,13 @@
         </activity>
 
         <!-- 로그인 화면-->
-        <activity android:name=".src.login.LoginActivity"/>
+        <activity android:name="com.makeus6.binding.src.login.LoginActivity"/>
 
         <!-- 회원가입 화면-->
-        <activity android:name=".src.join.JoinActivity"/>
+        <activity android:name="com.makeus6.binding.src.join.JoinActivity"/>
 
         <!-- 비밀번호 찾기 화면-->
-        <activity android:name=".src.find_password.FindPasswordActivity"/>
+        <activity android:name="com.makeus6.binding.src.find_password.FindPasswordActivity"/>
 
     </application>
 
Index: app/src/main/java/com/example/binding/config/BaseActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.config\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.viewbinding.ViewBinding\r\nimport com.example.binding.util.LoadingDialog\r\n\r\n// 액티비티의 기본을 작성, 뷰 바인딩 활용\r\nabstract class BaseActivity<B : ViewBinding>(private val inflate: (LayoutInflater) -> B) :\r\n    AppCompatActivity() {\r\n    protected lateinit var binding: B\r\n        private set\r\n    lateinit var mLoadingDialog: LoadingDialog\r\n\r\n    // 뷰 바인딩 객체를 받아서 inflate해서 화면을 만들어줌.\r\n    // 즉 매번 onCreate에서 setContentView를 하지 않아도 됨.\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n    }\r\n\r\n    // 로딩 다이얼로그, 즉 로딩창을 띄워줌.\r\n    // 네트워크가 시작될 때 사용자가 무작정 기다리게 하지 않기 위해 작성.\r\n    fun showLoadingDialog(context: Context) {\r\n        mLoadingDialog = LoadingDialog(context)\r\n        mLoadingDialog.show()\r\n    }\r\n    // 띄워 놓은 로딩 다이얼로그를 없앰.\r\n    fun dismissLoadingDialog() {\r\n        if (mLoadingDialog.isShowing) {\r\n            mLoadingDialog.dismiss()\r\n        }\r\n    }\r\n\r\n    // 토스트를 쉽게 띄울 수 있게 해줌.\r\n    fun showCustomToast(message: String) {\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/config/BaseActivity.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/config/BaseActivity.kt	(date 1616059348865)
@@ -1,4 +1,4 @@
-package com.example.binding.config
+package com.makeus6.binding.config
 
 import android.content.Context
 import android.os.Bundle
@@ -6,7 +6,7 @@
 import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
 import androidx.viewbinding.ViewBinding
-import com.example.binding.util.LoadingDialog
+import com.makeus6.binding.util.LoadingDialog
 
 // 액티비티의 기본을 작성, 뷰 바인딩 활용
 abstract class BaseActivity<B : ViewBinding>(private val inflate: (LayoutInflater) -> B) :
Index: app/src/main/java/com/example/binding/config/ApplicationClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.config\r\n\r\nimport android.app.Application\r\nimport android.content.SharedPreferences\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.util.concurrent.TimeUnit\r\n\r\n// 앱이 실행될때 1번만 실행이 됩니다.\r\nclass ApplicationClass : Application() {\r\n    // 테스트 서버 주소\r\n    val API_URL = \"https://test.liyusang1.site/\"\r\n\r\n    // 실 서버 주소\r\n    // val API_URL = \"http://api.test.com/\"\r\n\r\n    // 코틀린의 전역변수 문법\r\n    companion object {\r\n        // 만들어져있는 SharedPreferences 를 사용해야합니다. 재생성하지 않도록 유념해주세요\r\n        lateinit var sSharedPreferences: SharedPreferences\r\n\r\n        // JWT Token Header 키 값\r\n        val X_ACCESS_TOKEN = \"X-ACCESS-TOKEN\"\r\n\r\n        // Retrofit 인스턴스, 앱 실행시 한번만 생성하여 사용합니다.\r\n        lateinit var sRetrofit: Retrofit\r\n    }\r\n\r\n    // 앱이 처음 생성되는 순간, SP를 새로 만들어주고, 레트로핏 인스턴스를 생성합니다.\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        sSharedPreferences =\r\n            applicationContext.getSharedPreferences(\"SOFTSQUARED_TEMPLATE_APP\", MODE_PRIVATE)\r\n        // 레트로핏 인스턴스 생성\r\n        initRetrofitInstance()\r\n    }\r\n\r\n    // 레트로핏 인스턴스를 생성하고, 레트로핏에 각종 설정값들을 지정해줍니다.\r\n    // 연결 타임아웃시간은 5초로 지정이 되어있고, HttpLoggingInterceptor를 붙여서 어떤 요청이 나가고 들어오는지를 보여줍니다.\r\n    private fun initRetrofitInstance() {\r\n        val client: OkHttpClient = OkHttpClient.Builder()\r\n            .readTimeout(5000, TimeUnit.MILLISECONDS)\r\n            .connectTimeout(5000, TimeUnit.MILLISECONDS)\r\n            // 로그캣에 okhttp.OkHttpClient로 검색하면 http 통신 내용을 보여줍니다.\r\n            .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))\r\n            .addNetworkInterceptor(XAccessTokenInterceptor()) // JWT 자동 헤더 전송\r\n            .build()\r\n\r\n        // sRetrofit 이라는 전역변수에 API url, 인터셉터, Gson을 넣어주고 빌드해주는 코드\r\n        // 이 전역변수로 http 요청을 서버로 보내면 됩니다.\r\n        sRetrofit = Retrofit.Builder()\r\n            .baseUrl(API_URL)\r\n            .client(client)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/config/ApplicationClass.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/config/ApplicationClass.kt	(date 1616059346679)
@@ -1,4 +1,4 @@
-package com.example.binding.config
+package com.makeus6.binding.config
 
 import android.app.Application
 import android.content.SharedPreferences
Index: app/src/main/java/com/example/binding/config/BaseResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.config\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n// 반복되는 리스폰스 내용 중복을 줄이기 위해 사용. 리스폰스 데이터 클래스를 만들때 상속해서 사용합니다.\r\nopen class BaseResponse(\r\n    @SerializedName(\"isSuccess\") val isSuccess: Boolean = false,\r\n    @SerializedName(\"code\") val code: Int = 0,\r\n    @SerializedName(\"message\") val message: String? = null\r\n)
===================================================================
--- app/src/main/java/com/example/binding/config/BaseResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/config/BaseResponse.kt	(date 1616059348032)
@@ -1,4 +1,4 @@
-package com.example.binding.config
+package com.makeus6.binding.config
 
 import com.google.gson.annotations.SerializedName
 
Index: app/src/main/java/com/example/binding/config/BaseFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.config\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.annotation.LayoutRes\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.viewbinding.ViewBinding\r\nimport com.example.binding.util.LoadingDialog\r\n\r\n// Fragment의 기본을 작성, 뷰 바인딩 활용\r\nabstract class BaseFragment<B : ViewBinding>(\r\n    private val bind: (View) -> B,\r\n    @LayoutRes layoutResId: Int\r\n) : Fragment(layoutResId) {\r\n    private var _binding: B? = null\r\n    lateinit var mLoadingDialog: LoadingDialog\r\n\r\n    protected val binding get() = _binding!!\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = bind(super.onCreateView(inflater, container, savedInstanceState)!!)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        _binding = null\r\n        super.onDestroyView()\r\n    }\r\n\r\n    fun showCustomToast(message: String) {\r\n        Toast.makeText(activity, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    fun showLoadingDialog(context: Context) {\r\n        mLoadingDialog = LoadingDialog(context)\r\n        mLoadingDialog.show()\r\n    }\r\n\r\n    fun dismissLoadingDialog() {\r\n        if (mLoadingDialog.isShowing) {\r\n            mLoadingDialog.dismiss()\r\n        }\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/config/BaseFragment.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/config/BaseFragment.kt	(date 1616059345025)
@@ -1,4 +1,4 @@
-package com.example.binding.config
+package com.makeus6.binding.config
 
 import android.content.Context
 import android.os.Bundle
@@ -9,7 +9,7 @@
 import androidx.annotation.LayoutRes
 import androidx.fragment.app.Fragment
 import androidx.viewbinding.ViewBinding
-import com.example.binding.util.LoadingDialog
+import com.makeus6.binding.util.LoadingDialog
 
 // Fragment의 기본을 작성, 뷰 바인딩 활용
 abstract class BaseFragment<B : ViewBinding>(
Index: app/src/main/java/com/example/binding/config/XAccessTokenInterceptor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.config\r\n\r\nimport com.example.binding.config.ApplicationClass.Companion.X_ACCESS_TOKEN\r\nimport com.example.binding.config.ApplicationClass.Companion.sSharedPreferences\r\nimport okhttp3.Interceptor\r\nimport okhttp3.Request\r\nimport okhttp3.Response\r\nimport java.io.IOException\r\n\r\nclass XAccessTokenInterceptor : Interceptor {\r\n\r\n    @Throws(IOException::class)\r\n    override fun intercept(chain: Interceptor.Chain): Response {\r\n        val builder: Request.Builder = chain.request().newBuilder()\r\n        val jwtToken: String? = sSharedPreferences.getString(X_ACCESS_TOKEN, null)\r\n        if (jwtToken != null) {\r\n            builder.addHeader(\"X-ACCESS-TOKEN\", jwtToken)\r\n        }\r\n        return chain.proceed(builder.build())\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/binding/config/XAccessTokenInterceptor.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/config/XAccessTokenInterceptor.kt	(date 1616059347374)
@@ -1,7 +1,7 @@
-package com.example.binding.config
+package com.makeus6.binding.config
 
-import com.example.binding.config.ApplicationClass.Companion.X_ACCESS_TOKEN
-import com.example.binding.config.ApplicationClass.Companion.sSharedPreferences
+import com.makeus6.binding.config.ApplicationClass.Companion.X_ACCESS_TOKEN
+import com.makeus6.binding.config.ApplicationClass.Companion.sSharedPreferences
 import okhttp3.Interceptor
 import okhttp3.Request
 import okhttp3.Response
Index: app/src/main/res/layout/dialog_create_room.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"420dp\"\r\n    android:layout_marginLeft=\"20dp\"\r\n    android:layout_marginRight=\"20dp\"\r\n    android:background=\"@drawable/background_dialog_30dp\">\r\n    <TextView\r\n        android:id=\"@+id/dialog_create_room_text\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"책방 만들기\"\r\n        android:textColor=\"@color/colorPrimaryDark\"\r\n        android:fontFamily=\"@font/notosanskrbold\"\r\n        android:textSize=\"17dp\"\r\n        android:textAlignment=\"center\"\r\n        android:layout_marginTop=\"50dp\"\r\n        />\r\n\r\n    <EditText\r\n        android:id=\"@+id/dialog_create_room_title\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"40dp\"\r\n        android:layout_marginLeft=\"32dp\"\r\n        android:layout_marginRight=\"32dp\"\r\n        android:background=\"@null\"\r\n        android:hint=\"책 제목\"\r\n        android:paddingLeft=\"10dp\"\r\n        android:textSize=\"15dp\"\r\n        android:textColor=\"@color/ColorPrimaryLight\"\r\n        android:layout_below=\"@id/dialog_create_room_text\"/>\r\n\r\n    <View\r\n        android:id=\"@+id/dialog_create_room_title_line\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"1dp\"\r\n        android:layout_below=\"@+id/dialog_create_room_title\"\r\n        android:layout_marginTop=\"12.5dp\"\r\n        android:layout_marginLeft=\"32dp\"\r\n        android:layout_marginRight=\"32dp\"\r\n        android:background=\"#dadada\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/dialog_create_room_author\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"12.5dp\"\r\n        android:layout_marginLeft=\"32dp\"\r\n        android:layout_marginRight=\"32dp\"\r\n        android:background=\"@null\"\r\n        android:hint=\"저자\"\r\n        android:paddingLeft=\"10dp\"\r\n        android:textSize=\"15dp\"\r\n        android:textColor=\"@color/ColorPrimaryLight\"\r\n        android:layout_below=\"@id/dialog_create_room_title_line\"/>\r\n\r\n    <View\r\n        android:id=\"@+id/dialog_create_room_author_line\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"1dp\"\r\n        android:layout_below=\"@+id/dialog_create_room_author\"\r\n        android:layout_marginTop=\"12.5dp\"\r\n        android:layout_marginLeft=\"32dp\"\r\n        android:layout_marginRight=\"32dp\"\r\n        android:background=\"#dadada\" />\r\n\r\n    <ImageView\r\n        android:id=\"@+id/dialog_create_room_add\"\r\n        android:layout_width=\"40dp\"\r\n        android:layout_height=\"40dp\"\r\n        android:layout_below=\"@id/dialog_create_room_author_line\"\r\n        android:src=\"@drawable/add\"\r\n        android:layout_centerHorizontal=\"true\"\r\n        android:layout_marginTop=\"37.5dp\"/>\r\n\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"16dp\"\r\n        android:text=\"책 표지 사진을 첨부해주세요\"\r\n        android:textSize=\"15dp\"\r\n        android:textColor=\"@color/ColorPrimaryLight\"\r\n        android:layout_below=\"@id/dialog_create_room_add\"\r\n        android:layout_centerHorizontal=\"true\"/>\r\n\r\n    <Button\r\n        android:id=\"@+id/dialog_create_room_btn\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginRight=\"25dp\"\r\n        android:layout_marginBottom=\"25dp\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:text=\"만들기\"\r\n        android:fontFamily=\"@font/notosanskrbold\"\r\n        android:textSize=\"17dp\"\r\n        android:textColor=\"#ffffff\"\r\n        style=\"?android:attr/borderlessButtonStyle\"\r\n        android:background=\"@drawable/background_btn_20dp\"/>\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_create_room.xml	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/res/layout/dialog_create_room.xml	(date 1616057241812)
@@ -2,7 +2,7 @@
 <RelativeLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:layout_height="420dp"
+    android:layout_height="match_parent"
     android:layout_marginLeft="20dp"
     android:layout_marginRight="20dp"
     android:background="@drawable/background_dialog_30dp">
@@ -30,6 +30,7 @@
         android:paddingLeft="10dp"
         android:textSize="15dp"
         android:textColor="@color/ColorPrimaryLight"
+        android:fontFamily="@font/notosanskrregular"
         android:layout_below="@id/dialog_create_room_text"/>
 
     <View
@@ -54,6 +55,7 @@
         android:paddingLeft="10dp"
         android:textSize="15dp"
         android:textColor="@color/ColorPrimaryLight"
+        android:fontFamily="@font/notosanskrregular"
         android:layout_below="@id/dialog_create_room_title_line"/>
 
     <View
@@ -80,8 +82,9 @@
         android:layout_height="wrap_content"
         android:layout_marginTop="16dp"
         android:text="책 표지 사진을 첨부해주세요"
-        android:textSize="15dp"
+        android:textSize="15sp"
         android:textColor="@color/ColorPrimaryLight"
+        android:fontFamily="@font/notosanskrregular"
         android:layout_below="@id/dialog_create_room_add"
         android:layout_centerHorizontal="true"/>
 
@@ -92,7 +95,8 @@
         android:layout_marginLeft="25dp"
         android:layout_marginRight="25dp"
         android:layout_marginBottom="25dp"
-        android:layout_alignParentBottom="true"
+        android:layout_marginTop="77dp"
+        android:layout_below="@id/dialog_create_room_add"
         android:text="만들기"
         android:fontFamily="@font/notosanskrbold"
         android:textSize="17dp"
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class BookStoreInfo (\r\n    @SerializedName(\"storeName\") val storeName: String,     // 서점 이름\r\n    @SerializedName(\"isBookMark\") val isBookMark: Int,      // 북마크 여부\r\n    @SerializedName(\"location\") val location: String,       // 서점 주소\r\n    @SerializedName(\"storeTime\") val storeTime: String,     // 서점 운영 시간\r\n    @SerializedName(\"siteAddress\") val siteAddress: String, // 서점 웹주소\r\n    @SerializedName(\"phoneNumber\") val phoneNumber: String, // 서점 전화번호\r\n    @SerializedName(\"storeInfo\") val storeInfo: String      // 서점 설명\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreInfo.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/models/BookStoreInfo.kt	(date 1616059361202)
@@ -1,7 +1,5 @@
-package com.example.binding.src.main.menu.store_detail.models
+package com.makeus6.binding.src.main.menu.store_detail.models
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.main.menu.models.StoresResult
 import com.google.gson.annotations.SerializedName
 
 data class BookStoreInfo (
Index: app/src/test/java/com/example/binding/ExampleUnitTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding\r\n\r\nimport org.junit.Test\r\n\r\nimport org.junit.Assert.*\r\n\r\n/**\r\n * Example local unit test, which will execute on the development machine (host).\r\n *\r\n * See [testing documentation](http://d.android.com/tools/testing).\r\n */\r\nclass ExampleUnitTest {\r\n    @Test\r\n    fun addition_isCorrect() {\r\n        assertEquals(4, 2 + 2)\r\n    }\r\n}
===================================================================
--- app/src/test/java/com/example/binding/ExampleUnitTest.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/test/java/com/makeus6/binding/ExampleUnitTest.kt	(date 1616059343991)
@@ -1,4 +1,4 @@
-package com.example.binding
+package com.makeus6.binding
 
 import org.junit.Test
 
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreImages.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class BookStoreImages (\r\n    @SerializedName(\"imageIdx\") val imageIdx: Int,      // 이미지 인덱스\r\n    @SerializedName(\"imageUrl\") val imageUrl: String    // 이미지 url\r\n\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreImages.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/models/BookStoreImages.kt	(date 1616059361133)
@@ -1,7 +1,5 @@
-package com.example.binding.src.main.menu.store_detail.models
+package com.makeus6.binding.src.main.menu.store_detail.models
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.main.menu.models.StoresResult
 import com.google.gson.annotations.SerializedName
 
 data class BookStoreImages (
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreResult.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class BookStoreResult (\r\n    @SerializedName(\"images\") val images: ArrayList<BookStoreImages>,\r\n    @SerializedName(\"bookStoreInfo\") val bookStoreInfo: ArrayList<BookStoreInfo>\r\n)
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/models/BookStoreResult.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/models/BookStoreResult.kt	(date 1616059361246)
@@ -1,6 +1,5 @@
-package com.example.binding.src.main.menu.store_detail.models
+package com.makeus6.binding.src.main.menu.store_detail.models
 
-import com.example.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class BookStoreResult (
Index: app/src/androidTest/java/com/example/binding/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding\r\n\r\nimport androidx.test.platform.app.InstrumentationRegistry\r\nimport androidx.test.ext.junit.runners.AndroidJUnit4\r\n\r\nimport org.junit.Test\r\nimport org.junit.runner.RunWith\r\n\r\nimport org.junit.Assert.*\r\n\r\n/**\r\n * Instrumented test, which will execute on an Android device.\r\n *\r\n * See [testing documentation](http://d.android.com/tools/testing).\r\n */\r\n@RunWith(AndroidJUnit4::class)\r\nclass ExampleInstrumentedTest {\r\n    @Test\r\n    fun useAppContext() {\r\n        // Context of the app under test.\r\n        val appContext = InstrumentationRegistry.getInstrumentation().targetContext\r\n        assertEquals(\"com.example.binding\", appContext.packageName)\r\n    }\r\n}
===================================================================
--- app/src/androidTest/java/com/example/binding/ExampleInstrumentedTest.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/androidTest/java/com/makeus6/binding/ExampleInstrumentedTest.kt	(date 1616059348876)
@@ -1,4 +1,4 @@
-package com.example.binding
+package com.makeus6.binding
 
 import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
Index: app/src/main/java/com/example/binding/src/main/menu/store_detail/models/GetBookStoreResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.binding.src.main.menu.store_detail.models\r\n\r\nimport com.example.binding.config.BaseResponse\r\nimport com.example.binding.src.main.menu.models.StoresResult\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class GetBookStoreResponse (\r\n    @SerializedName(\"result\") val result: BookStoreResult\r\n): BaseResponse()
===================================================================
--- app/src/main/java/com/example/binding/src/main/menu/store_detail/models/GetBookStoreResponse.kt	(revision d515151653deba450ec7e2cfbc94d63388ce9a49)
+++ app/src/main/java/com/makeus6/binding/src/main/menu/store_detail/models/GetBookStoreResponse.kt	(date 1616059361149)
@@ -1,7 +1,6 @@
-package com.example.binding.src.main.menu.store_detail.models
+package com.makeus6.binding.src.main.menu.store_detail.models
 
-import com.example.binding.config.BaseResponse
-import com.example.binding.src.main.menu.models.StoresResult
+import com.makeus6.binding.config.BaseResponse
 import com.google.gson.annotations.SerializedName
 
 data class GetBookStoreResponse (
